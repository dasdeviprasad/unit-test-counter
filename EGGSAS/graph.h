#pragma once

// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CGraph wrapper class

class CGraph : public CWnd
{
protected:
	DECLARE_DYNCREATE(CGraph)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0xC04E4388, 0xC7ED, 0x4512, { 0x9B, 0x92, 0x6E, 0x51, 0x6A, 0x5, 0xF4, 0x21 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName, LPCTSTR lpszWindowName, DWORD dwStyle,
						const RECT& rect, CWnd* pParentWnd, UINT nID, 
						CCreateContext* pContext = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); 
	}

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, 
				UINT nID, CFile* pPersist = NULL, BOOL bStorage = FALSE,
				BSTR bstrLicKey = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); 
	}

// Attributes
public:
enum
{
    PEVS_COLOR = 0,
    PEVS_MONO = 1,
    PEVS_MONOWITHSYMBOLS = 2
}eViewingStyle;
enum
{
    PEDP_NODECIMALS = 0,
    PEDP_ONEDECIMAL = 1,
    PEDP_TWODECIMALS = 2,
    PEDP_THREEDECIMALS = 3,
    PEDP_FOURDECIMALS = 4,
    PEDP_FIVEDECIMALS = 5,
    PEDP_SIXDECIMALS = 6,
    PEDP_SEVENDECIMALS = 7
}eDataPrecision;
enum
{
    PEFS_LARGE = 0,
    PEFS_MEDIUM = 1,
    PEFS_SMALL = 2
}eFontSize;
enum
{
    PEVB_NONE = 0,
    PEVB_TOP = 1,
    PEVB_BOTTOM = 2,
    PEVB_TOPANDBOTTOM = 3
}eVBoundaryType;
enum
{
    PEAC_AUTO = 0,
    PEAC_NORMAL = 1,
    PEAC_LOG = 2
}eScaleControl;
enum
{
    SGPM_LINE = 0,
    SGPM_POINT = 1,
    SGPM_STICK = 2,
    SGPM_POINTSPLUSBFL = 3,
    SGPM_POINTSPLUSBFC = 4,
    SGPM_POINTSPLUSSPLINE = 5,
    SGPM_SPLINE = 6,
    SGPM_BUBBLE = 7,
    SGPM_POINTSPLUSLINE = 8,
    SGPM_AREA = 9,
    SGPM_BAR = 10,
    SGPM_SPECIFICPLOTMODE = 11,
    SGPM_STEP = 12,
    SGPM_RIBBON = 13,
    SGPM_CONTOURLINES = 14,
    SGPM_CONTOURCOLORS = 15
}ePlottingMethod;
enum
{
    PEGLC_BOTH = 0,
    PEGLC_YAXIS = 1,
    PEGLC_XAXIS = 2,
    PEGLC_NONE = 3
}eGridLineControl;
enum
{
    PEDO_DRIVERDEFAULT = 0,
    PEDO_LANDSCAPE = 1,
    PEDO_PORTRAIT = 2
}eDefOrientation;
enum
{
    PEMSC_NONE = 0,
    PEMSC_MIN = 1,
    PEMSC_MAX = 2,
    PEMSC_MINMAX = 3
}eManualScaleControl;
enum
{
    PESPM_NONE = 0,
    PESPM_HIGHLOWBAR = 1,
    PESPM_HIGHLOWLINE = 2,
    PESPM_HIGHLOWCLOSE = 3,
    PESPM_OPENHIGHLOWCLOSE = 4,
    PESPM_BOXPLOT = 5
}eSpecificPlotMode;
enum
{
    PEBFD_2ND = 0,
    PEBFD_3RD = 1,
    PEBFD_4TH = 2
}eBestFitDegree;
enum
{
    PECG_COARSE = 0,
    PECG_MEDIUM = 1,
    PECG_FINE = 2
}eCurveGranularity;
enum
{
    PEAZ_NONE = 0,
    PEAZ_HORIZONTAL = 1,
    PEAZ_VERTICAL = 2,
    PEAZ_HORZANDVERT = 3
}eAllowZooming;
enum
{
    PESF_TWENTYFOURPERCENT = 0,
    PESF_TWENTYTWOPERCENT = 1,
    PESF_TWENTYPERCENT = 2,
    PESF_EIGHTEENPRECENT = 3,
    PESF_SIXTEENPERCENT = 4,
    PESF_FOURTEENPERCENT = 5,
    PESF_TWELVEPERCENT = 6,
    PESF_TENPERCENT = 7,
    PESF_EIGHTPERCENT = 8,
    PESF_SIXPERCENT = 9
}eSymbolFrequency;
enum
{
    PECM_NOCURSOR = 0,
    PECM_POINT = 1,
    PECM_DATACROSS = 2,
    PECM_DATASQUARE = 3,
    PECM_FLOATINGY = 4,
    PECM_FLOATINGXY = 5,
    PECM_FLOATINGXONLY = 6,
    PECM_FLOATINGYONLY = 7
}eCursorMode;
enum
{
    PECPS_NONE = 0,
    PECPS_XVALUE = 1,
    PECPS_YVALUE = 2,
    PECPS_XYVALUES = 3
}eCursorPromptStyle;
enum
{
    PEZIO_NORMAL = 0,
    PEZIO_RECT = 1,
    PEZIO_LINE = 2
}eZoomInterfaceOnly;
enum
{
    SGPMII_LINE = 0,
    SGPMII_POINT = 1,
    SGPMII_POINTSPLUSBFL = 2,
    SGPMII_POINTSPLUSBFC = 3,
    SGPMII_POINTSPLUSSPLINE = 4,
    SGPMII_SPLINE = 5,
    SGPMII_POINTSPLUSLINE = 6,
    SGPMII_STEP = 7,
    SGPMII_RIBBON = 8
}ePlottingMethodII;
enum
{
    PESA_ALL = 0,
    PESA_AXISLABELS = 1,
    PESA_GRIDNUMBERS = 2,
    PESA_NONE = 3,
    PESA_LABELONLY = 4,
    PESA_EMPTY = 5
}eShowAxis;
enum
{
    PEGS_THIN = 0,
    PEGS_THICK = 1,
    PEGS_DOT = 2,
    PEGS_DASH = 3,
    PEGS_ONEPIXEL = 4
}eGridStyle;
enum
{
    PEBS_SMALL = 0,
    PEBS_MEDIUM = 1,
    PEBS_LARGE = 2
}eBubbleSize;
enum
{
    PEPS_SMALL = 0,
    PEPS_MEDIUM = 1,
    PEPS_LARGE = 2,
    PEPS_MICRO = 3
}ePointSize;
enum
{
    PEADL_NONE = 0,
    PEADL_DATAVALUES = 1,
    PEADL_POINTLABELS = 2,
    PEADL_DATAPOINTLABELS = 3
}eAllowDataLabels;
enum
{
    PEDTM_NONE = 0,
    PEDTM_VB = 1,
    PEDTM_DELPHI = 2
}eDateTimeMode;
enum
{
    PEMAS_NONE = 0,
    PEMAS_THIN = 1,
    PEMAS_MEDIUM = 2,
    PEMAS_THICK = 3,
    PEMAS_THICKPLUSTICK = 4
}eMultiAxesSeparators;
enum
{
    PELL_TOP = 0,
    PELL_BOTTOM = 1,
    PELL_LEFT = 2,
    PELL_RIGHT = 3
}eLegendLocation;
enum
{
    PESS_NONE = 0,
    PESS_FINANCIAL = 1
}eSpecialScaling;
enum
{
    PEHSS_SMALL = 0,
    PEHSS_MEDIUM = 1,
    PEHSS_LARGE = 2
}eHotSpotSize;
enum
{
    PEDS_NONE = 0,
    PEDS_SHADOWS = 1,
    PEDS_3D = 2
}eDataShadows;
enum
{
    PEAUI_NONE = 0,
    PEAUI_ALL = 1,
    PEAUI_DISABLEKEYBOARD = 2,
    PEAUI_DISABLEMOUSE = 3
}eAllowUserInterface;
enum
{
    PEMPS_NONE = 0,
    PEMPS_SMALL = 1,
    PEMPS_MEDIUM = 2,
    PEMPS_LARGE = 3
}eMinimumPointSize;
enum
{
    PETS_GRIDSTYLE = 0,
    PETS_THICK = 1,
    PETS_DOT = 2,
    PETS_DASH = 3,
    PETS_1UNIT = 4,
    PETS_THIN = 5
}eTickStyle;
enum
{
    PEZS_FRAMED_RECT = 0,
    PEZS_RO2_NOT = 1
}eZoomStyle;
enum
{
    PECPL_TOP_LEFT = 0,
    PECPL_TOP_RIGHT = 1
}eCursorPromptLocation;
enum
{
    PELS_2_LINE = 0,
    PELS_1_LINE = 1,
    PELS_1_LINE_INSIDE_AXIS = 2,
    PELS_1_LINE_TOP_OF_AXIS = 3,
    PELS_1_LINE_INSIDE_OVERLAP = 4
}eLegendStyle;
enum
{
    PEMAS_GROUP_ALL_AXES = 0,
    PEMAS_SEPARATE_AXES = 1
}eMultiAxisStyle;
enum
{
    PETAHO_HORZ = 0,
    PETAHO_90 = 1,
    PETAHO_270 = 2
}eTAHeaderOrientation;
enum
{
    PETAL_TOP_CENTER = 0,
    PETAL_TOP_LEFT = 1,
    PETAL_LEFT_CENTER = 2,
    PETAL_BOTTOM_LEFT = 3,
    PETAL_BOTTOM_CENTER = 4,
    PETAL_BOTTOM_RIGHT = 5,
    PETAL_RIGHT_CENTER = 6,
    PETAL_TOP_RIGHT = 7,
    PETAL_INSIDE_TOP_CENTER = 8,
    PETAL_INSIDE_TOP_LEFT = 9,
    PETAL_INSIDE_LEFT_CENTER = 10,
    PETAL_INSIDE_BOTTOM_LEFT = 11,
    PETAL_INSIDE_BOTTOM_CENTER = 12,
    PETAL_INSIDE_BOTTOM_RIGHT = 13,
    PETAL_INSIDE_RIGHT_CENTER = 14,
    PETAL_INSIDE_TOP_RIGHT = 15,
    PETAL_INSIDE_AXIS = 100,
    PETAL_INSIDE_AXIS_0 = 100,
    PETAL_INSIDE_AXIS_1 = 101,
    PETAL_INSIDE_AXIS_2 = 102,
    PETAL_INSIDE_AXIS_3 = 103,
    PETAL_INSIDE_AXIS_4 = 104,
    PETAL_INSIDE_AXIS_5 = 105,
    PETAL_OUTSIDE_AXIS = 200,
    PETAL_OUTSIDE_AXIS_0 = 200,
    PETAL_OUTSIDE_AXIS_1 = 201,
    PETAL_OUTSIDE_AXIS_2 = 202,
    PETAL_OUTSIDE_AXIS_3 = 203,
    PETAL_OUTSIDE_AXIS_4 = 204,
    PETAL_OUTSIDE_AXIS_5 = 205,
    PETAL_OVERLAP_AXIS = 400,
    PETAL_OVERLAP_AXIS_0 = 400,
    PETAL_OVERLAP_AXIS_1 = 401,
    PETAL_OVERLAP_AXIS_2 = 402,
    PETAL_OVERLAP_AXIS_3 = 403,
    PETAL_OVERLAP_AXIS_4 = 404,
    PETAL_OVERLAP_AXIS_5 = 405
}eTALocation;
enum
{
    PETAB_DROP_SHADOW = 0,
    PETAB_SINGLE_LINE = 1,
    PETAB_NO_BORDER = 2,
    PETAB_INSET = 3
}eTABorder;
enum
{
    PETAAL_TOP_FULL_WIDTH = 0,
    PETAAL_TOP_LEFT = 1,
    PETAAL_TOP_CENTER = 2,
    PETAAL_TOP_RIGHT = 3,
    PETAAL_BOTTOM_FULL_WIDTH = 4,
    PETAAL_BOTTOM_LEFT = 5,
    PETAAL_BOTTOM_CENTER = 6,
    PETAAL_BOTTOM_RIGHT = 7,
    PETAAL_TOP_TABLE_SPACED = 8,
    PETAAL_BOTTOM_TABLE_SPACED = 9,
    PETAAL_NEW_ROW = 100
}eTAAxisLocation;
enum
{
    PESTM_TICKS_INSIDE = 0,
    PESTM_TICKS_OUTSIDE = 1,
    PESTM_TICKS_HIDE = 2
}eShowTickMarks;
enum
{
    PEMC_HIDE = 0,
    PEMC_SHOW = 1,
    PEMC_GRAYED = 2
}eMenuControl;
enum
{
    PECM_SHOW = 0,
    PECM_GRAYED = 1,
    PECM_HIDE = 2
}eCustomMenu;
enum
{
    PECMS_UNCHECKED = 0,
    PECMS_CHECKED = 1
}eCustomMenuState;
enum
{
    PEGS_NO_GRADIENT = 0,
    PEGS_VERTICAL = 1,
    PEGS_HORIZONTAL = 2
}eGradientStyle;
enum
{
    PEBS_NO_BMP = 0,
    PEBS_STRETCHBLT = 1,
    PEBS_TILED_BITBLT = 2,
    PEBS_BITBLT_TOP_LEFT = 3,
    PEBS_BITBLT_TOP_CENTER = 4,
    PEBS_BITBLT_TOP_RIGHT = 5,
    PEBS_BITBLT_BOTTOM_LEFT = 6,
    PEBS_BITBLT_BOTTOM_CENTER = 7,
    PEBS_BITBLT_BOTTOM_RIGHT = 8,
    PEBS_BITBLT_CENTER = 9
}eBitmapStyle;
enum
{
    PEHIT_NO_HIDING = 0,
    PEHIT_HIDE = 1,
    PEHIT_HIDE_POINTER_TOP_RIGHT = 2,
    PEHIT_HIDE_POINTER_TOP_LEFT = 3,
    PEHIT_HIDE_POINTER_BOTTOM_LEFT = 4,
    PEHIT_HIDE_POINTER_BOTTOM_RIGHT = 5
}eHideIntersectingText;
enum
{
    PEQS_NO_STYLE = 0,
    PEQS_LIGHT_INSET = 1,
    PEQS_LIGHT_SHADOW = 2,
    PEQS_LIGHT_LINE = 3,
    PEQS_LIGHT_NO_BORDER = 4,
    PEQS_MEDIUM_INSET = 5,
    PEQS_MEDIUM_SHADOW = 6,
    PEQS_MEDIUM_LINE = 7,
    PEQS_MEDIUM_NO_BORDER = 8,
    PEQS_DARK_INSET = 9,
    PEQS_DARK_SHADOW = 10,
    PEQS_DARK_LINE = 11,
    PEQS_DARK_NO_BORDER = 12
}eQuickStyle;
enum
{
    PETAJ_LEFT = 0,
    PETAJ_CENTER = 1,
    PETAJ_RIGHT = 2
}eTAJustification;
enum
{
    PECML_TOP = 0,
    PECML_ABOVE_SEPARATOR = 1,
    PECML_BELOW_SEPARATOR = 2,
    PECML_BOTTOM = 3
}eCustomMenuLocation;
enum
{
    PEPT_PLUS = 0,
    PEPT_CROSS = 1,
    PEPT_DOT = 2,
    PEPT_DOTSOLID = 3,
    PEPT_SQUARE = 4,
    PEPT_SQUARESOLID = 5,
    PEPT_DIAMOND = 6,
    PEPT_DIAMONDSOLID = 7,
    PEPT_UPTRIANGLE = 8,
    PEPT_UPTRIANGLESOLID = 9,
    PEPT_DOWNTRIANGLE = 10,
    PEPT_DOWNTRIANGLESOLID = 11,
    PEPT_DASH = 72,
    PEPT_PIXEL = 73,
    PEPT_ARROW_N = 92,
    PEPT_ARROW_NE = 93,
    PEPT_ARROW_E = 94,
    PEPT_ARROW_SE = 95,
    PEPT_ARROW_S = 96,
    PEPT_ARROW_SW = 97,
    PEPT_ARROW_W = 98,
    PEPT_ARROW_NW = 99
}ePointType;
enum
{
    PELT_THIN_SOLID = 0,
    PELT_DASH = 1,
    PELT_DOT = 2,
    PELT_DASH_DOT = 3,
    PELT_DASH_DOTDOT = 4,
    PELT_MEDIUM_SOLID = 5,
    PELT_THICK_SOLID = 6,
    PELT_MEDIUM_THIN_SOLID = 9,
    PELT_MEDIUM_THICK_SOLID = 10,
    PELT_EXTRA_THICK_SOLID = 11,
    PELT_EXTRA_THIN_SOLID = 12
}eLineType;
enum
{
    PELAT_THIN_SOLID = 0,
    PELAT_DASH = 1,
    PELAT_DOT = 2,
    PELAT_DASH_DOT = 3,
    PELAT_DASH_DOTDOT = 4,
    PELAT_MEDIUM_SOLID = 5,
    PELAT_THICK_SOLID = 6,
    PELAT_GRIDTICK = 7,
    PELAT_GRIDLINE = 8,
    PELAT_MEDIUM_THIN_SOLID = 9,
    PELAT_MEDIUM_THICK_SOLID = 10,
    PELAT_EXTRA_THICK_SOLID = 11,
    PELAT_EXTRA_THIN_SOLID = 12,
    PELAT_GRIDTICKII = 14,
    PELAT_GRIDLINEII = 15,
    PELAT_ON_RIGHT_AXIS = 1000
}eLineAnnotationType;
enum
{
    PEGAT_NOSYMBOL = 0,
    PEGAT_PLUS = 1,
    PEGAT_CROSS = 2,
    PEGAT_DOT = 3,
    PEGAT_DOTSOLID = 4,
    PEGAT_SQUARE = 5,
    PEGAT_SQUARESOLID = 6,
    PEGAT_DIAMOND = 7,
    PEGAT_DIAMONDSOLID = 8,
    PEGAT_UPTRIANGLE = 9,
    PEGAT_UPTRIANGLESOLID = 10,
    PEGAT_DOWNTRIANGLE = 11,
    PEGAT_DOWNTRIANGLESOLID = 12,
    PEGAT_SMALL_PLUS = 13,
    PEGAT_SMALL_CROSS = 14,
    PEGAT_SMALL_DOT = 15,
    PEGAT_SMALL_DOTSOLID = 16,
    PEGAT_SMALL_SQUARE = 17,
    PEGAT_SMALL_SQUARESOLID = 18,
    PEGAT_SMALL_DIAMOND = 19,
    PEGAT_SMALL_DIAMONDSOLID = 20,
    PEGAT_SMALL_UPTRIANGLE = 21,
    PEGAT_SMALL_UPTRIANGLESOLID = 22,
    PEGAT_SMALL_DOWNTRIANGLE = 23,
    PEGAT_SMALL_DOWNTRIANGLESOLID = 24,
    PEGAT_LARGE_PLUS = 25,
    PEGAT_LARGE_CROSS = 26,
    PEGAT_LARGE_DOT = 27,
    PEGAT_LARGE_DOTSOLID = 28,
    PEGAT_LARGE_SQUARE = 29,
    PEGAT_LARGE_SQUARESOLID = 30,
    PEGAT_LARGE_DIAMOND = 31,
    PEGAT_LARGE_DIAMONDSOLID = 32,
    PEGAT_LARGE_UPTRIANGLE = 33,
    PEGAT_LARGE_UPTRIANGLESOLID = 34,
    PEGAT_LARGE_DOWNTRIANGLE = 35,
    PEGAT_LARGE_DOWNTRIANGLESOLID = 36,
    PEGAT_POINTER = 37,
    PEGAT_THIN_SOLIDLINE = 38,
    PEGAT_DASH_LINE = 39,
    PEGAT_DOT_LINE = 40,
    PEGAT_DASH_DOTLINE = 41,
    PEGAT_DASH_DOTDOTLINE = 42,
    PEGAT_MEDIUM_SOLIDLINE = 43,
    PEGAT_THICK_SOLIDLINE = 44,
    PEGAT_LINECONTINUE = 45,
    PEGAT_TOPLEFT = 46,
    PEGAT_BOTTOMRIGHT = 47,
    PEGAT_RECT_THIN = 48,
    PEGAT_RECT_DASH = 49,
    PEGAT_RECT_DOT = 50,
    PEGAT_RECT_DASHDOT = 51,
    PEGAT_RECT_DASHDOTDOT = 52,
    PEGAT_RECT_MEDIUM = 53,
    PEGAT_RECT_THICK = 54,
    PEGAT_RECT_FILL = 55,
    PEGAT_ROUNDRECT_THIN = 56,
    PEGAT_ROUNDRECT_DASH = 57,
    PEGAT_ROUNDRECT_DOT = 58,
    PEGAT_ROUNDRECT_DASHDOT = 59,
    PEGAT_ROUNDRECT_DASHDOTDOT = 60,
    PEGAT_ROUNDRECT_MEDIUM = 61,
    PEGAT_ROUNDRECT_THICK = 62,
    PEGAT_ROUNDRECT_FILL = 63,
    PEGAT_ELLIPSE_THIN = 64,
    PEGAT_ELLIPSE_DASH = 65,
    PEGAT_ELLIPSE_DOT = 66,
    PEGAT_ELLIPSE_DASHDOT = 67,
    PEGAT_ELLIPSE_DASHDOTDOT = 68,
    PEGAT_ELLIPSE_MEDIUM = 69,
    PEGAT_ELLIPSE_THICK = 70,
    PEGAT_ELLIPSE_FILL = 71,
    PEGAT_DASH = 72,
    PEGAT_PIXEL = 73,
    PEGAT_START_POLY = 74,
    PEGAT_ADDPOLYPOINT = 75,
    PEGAT_ENDPOLYGON = 76,
    PEGAT_ENDPOLYLINE_THIN = 77,
    PEGAT_ENDPOLYLINE_MEDIUM = 78,
    PEGAT_ENDPOLYLINE_THICK = 79,
    PEGAT_ENDPOLYLINE_DASH = 80,
    PEGAT_ENDPOLYLINE_DOT = 81,
    PEGAT_ENDPOLYLINE_DASHDOT = 82,
    PEGAT_ENDPOLYLINE_DASHDOTDOT = 83,
    PEGAT_START_TEXT = 84,
    PEGAT_ADD_TEXT = 85,
    PEGAT_PARAGRAPH = 86,
    PEGAT_MEDIUM_THINSOLID = 87,
    PEGAT_MEDIUM_THICKSOLID = 88,
    PEGAT_EXTRA_THICKSOLID = 89,
    PEGAT_EXTRA_THINSOLID = 90,
    PEGAT_ARROW_N = 92,
    PEGAT_ARROW_NE = 93,
    PEGAT_ARROW_E = 94,
    PEGAT_ARROW_SE = 95,
    PEGAT_ARROW_S = 96,
    PEGAT_ARROW_SW = 97,
    PEGAT_ARROW_W = 98,
    PEGAT_ARROW_NW = 99,
    PEGAT_SMALL_OBSTACLE = 100,
    PEGAT_MEDIUM_OBSTACLE = 101,
    PEGAT_LARGE_OBSTACLE = 102,
    PEGAT_RECT_OBSTACLE = 103,
    PEGAT_NOSYMBOL_MOVABLE = 104
}eGraphAnnotationType;
enum
{
    LAT_NOSYMBOL = 0,
    LAT_PLUS = 1,
    LAT_CROSS = 2,
    LAT_DOT = 3,
    LAT_DOTSOLID = 4,
    LAT_SQUARE = 5,
    LAT_SQUARESOLID = 6,
    LAT_DIAMOND = 7,
    LAT_DIAMONDSOLID = 8,
    LAT_UPTRIANGLE = 9,
    LAT_UPTRIANGLESOLID = 10,
    LAT_DOWNTRIANGLE = 11,
    LAT_DOWNTRIANGLESOLID = 12,
    LAT_SMALL_PLUS = 13,
    LAT_SMALL_CROSS = 14,
    LAT_SMALL_DOT = 15,
    LAT_SMALL_DOTSOLID = 16,
    LAT_SMALL_SQUARE = 17,
    LAT_SMALL_SQUARESOLID = 18,
    LAT_SMALL_DIAMOND = 19,
    LAT_SMALL_DIAMONDSOLID = 20,
    LAT_SMALL_UPTRIANGLE = 21,
    LAT_SMALL_UPTRIANGLESOLID = 22,
    LAT_SMALL_DOWNTRIANGLE = 23,
    LAT_SMALL_DOWNTRIANGLESOLID = 24,
    LAT_LARGE_PLUS = 25,
    LAT_LARGE_CROSS = 26,
    LAT_LARGE_DOT = 27,
    LAT_LARGE_DOTSOLID = 28,
    LAT_LARGE_SQUARE = 29,
    LAT_LARGE_SQUARESOLID = 30,
    LAT_LARGE_DIAMOND = 31,
    LAT_LARGE_DIAMONDSOLID = 32,
    LAT_LARGE_UPTRIANGLE = 33,
    LAT_LARGE_UPTRIANGLESOLID = 34,
    LAT_LARGE_DOWNTRIANGLE = 35,
    LAT_LARGE_DOWNTRIANGLESOLID = 36,
    LAT_THIN_SOLIDLINE = 38,
    LAT_DASH_LINE = 39,
    LAT_DOT_LINE = 40,
    LAT_DASH_DOTLINE = 41,
    LAT_DASH_DOTDOTLINE = 42,
    LAT_MEDIUM_SOLIDLINE = 43,
    LAT_THICK_SOLIDLINE = 44,
    LAT_DASH = 72,
    LAT_PIXEL = 73,
    LAT_MEDIUM_THINSOLID = 87,
    LAT_MEDIUM_THICKSOLID = 88,
    LAT_EXTRA_THICKSOLID = 89,
    LAT_EXTRA_THINSOLID = 90,
    LAT_ARROW_N = 92,
    LAT_ARROW_NE = 93,
    LAT_ARROW_E = 94,
    LAT_ARROW_SE = 95,
    LAT_ARROW_S = 96,
    LAT_ARROW_SW = 97,
    LAT_ARROW_W = 98,
    LAT_ARROW_NW = 99
}eLegendAnnotationType;
enum
{
    REINITIALIZE_RESETIMAGE = 0,
    REINITIALIZE = 1,
    RESET_IMAGE = 2,
    INVALIDATE_RECT = 3,
    LAUNCH_MAXIMIZE = 4,
    LAUNCH_CUSTOMIZE_DIALOG = 5,
    LAUNCH_EXPORT_DIALOG = 6,
    LAUNCH_TEXT_EXPORT_DIALOG = 7,
    LAUNCH_PRINT_DIALOG = 8,
    LAUNCH_POPUP_MENU = 11,
    COPY_META_TO_CLIPBOARD = 12,
    COPY_META_TO_FILE = 13,
    COPY_BMP_TO_CLIPBOARD = 14,
    COPY_BMP_TO_FILE = 15,
    REINITIALIZE_QUICK = 17,
    PRINT_GRAPH = 18,
    UNDO_ZOOM = 19,
    REVERT_TO_DEFAULTS = 20,
    COPY_JPEG_TO_FILE = 22,
    COPY_PNG_TO_CLIPBOARD = 23,
    COPY_PNG_TO_FILE = 24
}ePEactions;
enum
{
    PEGPM_LINE = 0,
    PEGPM_BAR = 1,
    PEGPM_POINT = 2,
    PEGPM_AREA = 3,
    PEGPM_STICK = 4,
    PEGPM_POINTSPLUSBFL = 8,
    PEGPM_BUBBLE = 12,
    PEGPM_POINTSPLUSBFC = 13,
    PEGPM_POINTSPLUSSPLINE = 15,
    PEGPM_SPLINE = 16,
    PEGPM_POINTSPLUSLINE = 17,
    PEGPM_HORIZONTALBAR = 18,
    PEGPM_HORZSTACKEDBAR = 19,
    PEGPM_HORZSTACKEDBARPERCENT = 20,
    PEGPM_STEP = 21,
    PEGPM_RIBBON = 22,
    PEGPM_CONTOURLINES = 23,
    PEGPM_CONTOURCOLORS = 24,
    PEGPM_HIGHLOWBAR = 25,
    PEGPM_HIGHLOWLINE = 26,
    PEGPM_HIGHLOWCLOSE = 27,
    PEGPM_OPENHIGHLOWCLOSE = 28,
    PEGPM_BOXPLOT = 29,
    PEGPM_ON_RIGHT_AXIS = 1000,
    PEGPM_ON_RIGHT_TOP_AXIS = 2000,
    PEGPM_ON_TOP_AXIS = 3000
}ePlottingMethods;
enum
{
    PEHS_HORIZONTAL = 0,
    PEHS_VERTICAL = 1,
    PEHS_FDIAGONAL = 2,
    PEHS_BDIAGONAL = 3,
    PEHS_CROSS = 4,
    PEHS_DIAGCROSS = 5
}eHatchType;
enum
{
    PEDP_ENABLED = 0,
    PEDP_DISABLED = 1
}eYearMonthDayPrompt;
enum
{
    PETLT_12HR_AM_PM = 0,
    PETLT_12HR_NO_AM_PM = 1,
    PETLT_24HR = 2
}eTimeLabelType;
enum
{
    PEDLT_3_CHAR = 0,
    PEDLT_1_CHAR = 1,
    PEDLT_NO_DAY_PROMPT = 2,
    PEDLT_NO_DAY_NUMBER = 3
}eDayLabelType;
enum
{
    PEMLT_3_CHAR = 0,
    PEMLT_1_CHAR = 1,
    PEMLT_NO_MONTH_PROMPT = 2
}eMonthLabelType;
enum
{
    PEYLT_4_CHAR = 0,
    PEYLT_2_CHAR = 1,
    PEYLT_NO_YEAR_PROMPT = 2
}eYearLabelType;
enum
{
    FIRST_DEFAULT_TAB = 0,
    PEP_bALLOWPAGE1 = 2930,
    PEP_bALLOWPAGE2 = 2931,
    PEP_bALLOWSUBSETPAGE = 2932,
    PEP_bALLOWPOINTSPAGE = 2933,
    PEP_bALLOWFONTPAGE = 2934,
    PEP_bALLOWCOLORPAGE = 2935,
    PEP_bALLOWSTYLEPAGE = 2936,
    PEP_bALLOWAXISPAGE = 2937
}ePElaunchIDs;
enum
{
    PEPSC_NONE = 0,
    PEPSC_CURRENT_STYLE = 1,
    PEPSC_DEFAULT_MONO = 2
}ePrintStyleControl;
enum
{
    PEETD_METAFILE = 0,
    PEETD_BMP = 1,
    PEETD_JPEG = 2,
    PEETD_PNG = 3,
    PEETD_TEXT = 4
}eExportTypeDef;
enum
{
    PEEDD_CLIPBOARD = 0,
    PEEDD_FILE = 1,
    PEEDD_PRINTER = 2
}eExportDestDef;
enum
{
    PEESD_NO_SIZE_OR_PIXEL = 0,
    PEESD_MILLIMETERS = 1,
    PEESD_INCHES = 2,
    PEESD_POINTS = 3
}eExportSizeDef;
enum
{
    PEGAM_NOT_MOVEABLE = 0,
    PEGAM_POINTER = 1
}eGraphAnnotMoveable;
enum
{
    PETS_NO_TEXT = 0,
    PETS_BOLD_TEXT = 1,
    PETS_ALL_TEXT = 2
}eTextShadows;
enum
{
    PEMWF_VERT_SCROLL = 0,
    PEMWF_HORZ_SCROLL = 1,
    PEMWF_NO_SCROLL = 2
}eMouseWheelFunction;


// Operations
public:

// _DPesgo

// Functions
//

	BOOL PEreinitialize()
	{
		BOOL result;
		InvokeHelper(0x70, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL PEresetimage(short nXAspect, short nYAspect)
	{
		BOOL result;
		static BYTE parms[] = VTS_I2 VTS_I2 ;
		InvokeHelper(0x71, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, nXAspect, nYAspect);
		return result;
	}
	BOOL PEInvalidate()
	{
		BOOL result;
		InvokeHelper(0x72, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL PEreinitializecustoms()
	{
		BOOL result;
		InvokeHelper(0x73, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL PEcopybitmaptoclipboard(short nXPixels, short nYPixels)
	{
		BOOL result;
		static BYTE parms[] = VTS_I2 VTS_I2 ;
		InvokeHelper(0x74, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, nXPixels, nYPixels);
		return result;
	}
	BOOL PEcopybitmaptofile(short nXPixels, short nYPixels, LPCTSTR szFilename)
	{
		BOOL result;
		static BYTE parms[] = VTS_I2 VTS_I2 VTS_BSTR ;
		InvokeHelper(0x75, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, nXPixels, nYPixels, szFilename);
		return result;
	}
	BOOL PEcopymetatoclipboard(short nWidth, short nHeight)
	{
		BOOL result;
		static BYTE parms[] = VTS_I2 VTS_I2 ;
		InvokeHelper(0x76, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, nWidth, nHeight);
		return result;
	}
	BOOL PEcopymetatofile(short nWidth, short nHeight, LPCTSTR szFilename)
	{
		BOOL result;
		static BYTE parms[] = VTS_I2 VTS_I2 VTS_BSTR ;
		InvokeHelper(0x77, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, nWidth, nHeight, szFilename);
		return result;
	}
	BOOL PElaunchcolordialog()
	{
		BOOL result;
		InvokeHelper(0x78, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL PElaunchcustomizeEx(long nTabToShow)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x79, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, nTabToShow);
		return result;
	}
	BOOL PElaunchexport()
	{
		BOOL result;
		InvokeHelper(0x7a, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL PElaunchfontdialog()
	{
		BOOL result;
		InvokeHelper(0x7b, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL PElaunchmaximize()
	{
		BOOL result;
		InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL PElaunchpopupmenu(short nXPos, short nYPos)
	{
		BOOL result;
		static BYTE parms[] = VTS_I2 VTS_I2 ;
		InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, nXPos, nYPos);
		return result;
	}
	BOOL PElaunchprintdialog(BOOL bFullPage, short nWidth, short nHeight)
	{
		BOOL result;
		static BYTE parms[] = VTS_BOOL VTS_I2 VTS_I2 ;
		InvokeHelper(0x7e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, bFullPage, nWidth, nHeight);
		return result;
	}
	BOOL PElaunchtextexport(BOOL bToFile, LPCTSTR szFilename)
	{
		BOOL result;
		static BYTE parms[] = VTS_BOOL VTS_BSTR ;
		InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, bToFile, szFilename);
		return result;
	}
	float get_XData(long subsetindex, long pointindex)
	{
		float result;
		static BYTE parms[] = VTS_I4 VTS_I4 ;
		InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms, subsetindex, pointindex);
		return result;
	}
	void put_XData(long subsetindex, long pointindex, float newValue)
	{
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_R4 ;
		InvokeHelper(0x80, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, subsetindex, pointindex, newValue);
	}
	float get_YData(long subsetindex, long pointindex)
	{
		float result;
		static BYTE parms[] = VTS_I4 VTS_I4 ;
		InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms, subsetindex, pointindex);
		return result;
	}
	void put_YData(long subsetindex, long pointindex, float newValue)
	{
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_R4 ;
		InvokeHelper(0x81, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, subsetindex, pointindex, newValue);
	}
	short get_RandomSubsetsToGraph(short index)
	{
		short result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x82, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms, index);
		return result;
	}
	void put_RandomSubsetsToGraph(short index, short newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 ;
		InvokeHelper(0x82, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	CString get_SubsetLabels(short index)
	{
		CString result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x83, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms, index);
		return result;
	}
	void put_SubsetLabels(short index, LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_BSTR ;
		InvokeHelper(0x83, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	unsigned long get_SubsetColors(short index)
	{
		unsigned long result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x84, DISPATCH_PROPERTYGET, VT_UI4, (void*)&result, parms, index);
		return result;
	}
	void put_SubsetColors(short index, unsigned long newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_UI4 ;
		InvokeHelper(0x84, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	long get_SubsetPointTypes(short index)
	{
		long result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x85, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms, index);
		return result;
	}
	void put_SubsetPointTypes(short index, long newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_I4 ;
		InvokeHelper(0x85, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	long get_SubsetLineTypes(short index)
	{
		long result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x86, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms, index);
		return result;
	}
	void put_SubsetLineTypes(short index, long newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_I4 ;
		InvokeHelper(0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	CString get_DataPointLabels(long subsetindex, long pointindex)
	{
		CString result;
		static BYTE parms[] = VTS_I4 VTS_I4 ;
		InvokeHelper(0x87, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms, subsetindex, pointindex);
		return result;
	}
	void put_DataPointLabels(long subsetindex, long pointindex, LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_BSTR ;
		InvokeHelper(0x87, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, subsetindex, pointindex, newValue);
	}
	float get_ZData(long subsetindex, long pointindex)
	{
		float result;
		static BYTE parms[] = VTS_I4 VTS_I4 ;
		InvokeHelper(0x88, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms, subsetindex, pointindex);
		return result;
	}
	void put_ZData(long subsetindex, long pointindex, float newValue)
	{
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_R4 ;
		InvokeHelper(0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, subsetindex, pointindex, newValue);
	}
	double get_GraphAnnotationX(short index)
	{
		double result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x92, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms, index);
		return result;
	}
	void put_GraphAnnotationX(short index, double newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_R8 ;
		InvokeHelper(0x92, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	double get_GraphAnnotationY(short index)
	{
		double result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x93, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms, index);
		return result;
	}
	void put_GraphAnnotationY(short index, double newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_R8 ;
		InvokeHelper(0x93, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	CString get_GraphAnnotationText(short index)
	{
		CString result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x94, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms, index);
		return result;
	}
	void put_GraphAnnotationText(short index, LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_BSTR ;
		InvokeHelper(0x94, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	double get_XAxisAnnotation(short index)
	{
		double result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms, index);
		return result;
	}
	void put_XAxisAnnotation(short index, double newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_R8 ;
		InvokeHelper(0x95, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	CString get_XAxisAnnotationText(short index)
	{
		CString result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms, index);
		return result;
	}
	void put_XAxisAnnotationText(short index, LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_BSTR ;
		InvokeHelper(0x96, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	double get_YAxisAnnotation(short index)
	{
		double result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x97, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms, index);
		return result;
	}
	void put_YAxisAnnotation(short index, double newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_R8 ;
		InvokeHelper(0x97, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	CString get_YAxisAnnotationText(short index)
	{
		CString result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x98, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms, index);
		return result;
	}
	void put_YAxisAnnotationText(short index, LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_BSTR ;
		InvokeHelper(0x98, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	double get_HorzLineAnnotation(short index)
	{
		double result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x9d, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms, index);
		return result;
	}
	void put_HorzLineAnnotation(short index, double newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_R8 ;
		InvokeHelper(0x9d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	CString get_HorzLineAnnotationText(short index)
	{
		CString result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x9e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms, index);
		return result;
	}
	void put_HorzLineAnnotationText(short index, LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_BSTR ;
		InvokeHelper(0x9e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	long get_HorzLineAnnotationType(short index)
	{
		long result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x9f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms, index);
		return result;
	}
	void put_HorzLineAnnotationType(short index, long newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_I4 ;
		InvokeHelper(0x9f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	unsigned long get_HorzLineAnnotationColor(short index)
	{
		unsigned long result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0xa0, DISPATCH_PROPERTYGET, VT_UI4, (void*)&result, parms, index);
		return result;
	}
	void put_HorzLineAnnotationColor(short index, unsigned long newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_UI4 ;
		InvokeHelper(0xa0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	double get_VertLineAnnotation(short index)
	{
		double result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0xa1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms, index);
		return result;
	}
	void put_VertLineAnnotation(short index, double newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_R8 ;
		InvokeHelper(0xa1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	CString get_VertLineAnnotationText(short index)
	{
		CString result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0xa2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms, index);
		return result;
	}
	void put_VertLineAnnotationText(short index, LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_BSTR ;
		InvokeHelper(0xa2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	long get_VertLineAnnotationType(short index)
	{
		long result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0xa3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms, index);
		return result;
	}
	void put_VertLineAnnotationType(short index, long newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_I4 ;
		InvokeHelper(0xa3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	unsigned long get_VertLineAnnotationColor(short index)
	{
		unsigned long result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0xa4, DISPATCH_PROPERTYGET, VT_UI4, (void*)&result, parms, index);
		return result;
	}
	void put_VertLineAnnotationColor(short index, unsigned long newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_UI4 ;
		InvokeHelper(0xa4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	unsigned long get_GraphAnnotationColor(short index)
	{
		unsigned long result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0xae, DISPATCH_PROPERTYGET, VT_UI4, (void*)&result, parms, index);
		return result;
	}
	void put_GraphAnnotationColor(short index, unsigned long newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_UI4 ;
		InvokeHelper(0xae, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	unsigned long get_XAxisAnnotationColor(short index)
	{
		unsigned long result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0xaf, DISPATCH_PROPERTYGET, VT_UI4, (void*)&result, parms, index);
		return result;
	}
	void put_XAxisAnnotationColor(short index, unsigned long newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_UI4 ;
		InvokeHelper(0xaf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	unsigned long get_YAxisAnnotationColor(short index)
	{
		unsigned long result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0xb0, DISPATCH_PROPERTYGET, VT_UI4, (void*)&result, parms, index);
		return result;
	}
	void put_YAxisAnnotationColor(short index, unsigned long newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_UI4 ;
		InvokeHelper(0xb0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	long get_GraphAnnotationType(short index)
	{
		long result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0xb3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms, index);
		return result;
	}
	void put_GraphAnnotationType(short index, long newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_I4 ;
		InvokeHelper(0xb3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	short get_SubsetsToLegend(short index)
	{
		short result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0xb4, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms, index);
		return result;
	}
	void put_SubsetsToLegend(short index, short newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 ;
		InvokeHelper(0xb4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	long get_LegendAnnotationType(short index)
	{
		long result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0xb5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms, index);
		return result;
	}
	void put_LegendAnnotationType(short index, long newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_I4 ;
		InvokeHelper(0xb5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	CString get_LegendAnnotationText(short index)
	{
		CString result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0xb6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms, index);
		return result;
	}
	void put_LegendAnnotationText(short index, LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_BSTR ;
		InvokeHelper(0xb6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	unsigned long get_LegendAnnotationColor(short index)
	{
		unsigned long result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0xb7, DISPATCH_PROPERTYGET, VT_UI4, (void*)&result, parms, index);
		return result;
	}
	void put_LegendAnnotationColor(short index, unsigned long newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_UI4 ;
		InvokeHelper(0xb7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	unsigned long get_PointColors(long subsetindex, long pointindex)
	{
		unsigned long result;
		static BYTE parms[] = VTS_I4 VTS_I4 ;
		InvokeHelper(0xbd, DISPATCH_PROPERTYGET, VT_UI4, (void*)&result, parms, subsetindex, pointindex);
		return result;
	}
	void put_PointColors(long subsetindex, long pointindex, unsigned long newValue)
	{
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_UI4 ;
		InvokeHelper(0xbd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, subsetindex, pointindex, newValue);
	}
	short get_MultiAxesSubsets(short index)
	{
		short result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0xbe, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms, index);
		return result;
	}
	void put_MultiAxesSubsets(short index, short newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 ;
		InvokeHelper(0xbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	short get_GraphAnnotationAxis(short index)
	{
		short result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0xbf, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms, index);
		return result;
	}
	void put_GraphAnnotationAxis(short index, short newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 ;
		InvokeHelper(0xbf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	short get_HorzLineAnnotationAxis(short index)
	{
		short result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0xc0, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms, index);
		return result;
	}
	void put_HorzLineAnnotationAxis(short index, short newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 ;
		InvokeHelper(0xc0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	float get_MultiAxesProportions(short index)
	{
		float result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0xc1, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms, index);
		return result;
	}
	void put_MultiAxesProportions(short index, float newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_R4 ;
		InvokeHelper(0xc1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	short get_LegendAnnotationAxis(short index)
	{
		short result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0xc2, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms, index);
		return result;
	}
	void put_LegendAnnotationAxis(short index, short newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 ;
		InvokeHelper(0xc2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	CString get_MultiSubTitles(short index)
	{
		CString result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0xc9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms, index);
		return result;
	}
	void put_MultiSubTitles(short index, LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_BSTR ;
		InvokeHelper(0xc9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	CString get_MultiBottomTitles(short index)
	{
		CString result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0xca, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms, index);
		return result;
	}
	void put_MultiBottomTitles(short index, LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_BSTR ;
		InvokeHelper(0xca, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	double get_YDataII(long subsetindex, long pointindex)
	{
		double result;
		static BYTE parms[] = VTS_I4 VTS_I4 ;
		InvokeHelper(0xde, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms, subsetindex, pointindex);
		return result;
	}
	void put_YDataII(long subsetindex, long pointindex, double newValue)
	{
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_R8 ;
		InvokeHelper(0xde, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, subsetindex, pointindex, newValue);
	}
	double get_XDataII(long subsetindex, long pointindex)
	{
		double result;
		static BYTE parms[] = VTS_I4 VTS_I4 ;
		InvokeHelper(0xfa, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms, subsetindex, pointindex);
		return result;
	}
	void put_XDataII(long subsetindex, long pointindex, double newValue)
	{
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_R8 ;
		InvokeHelper(0xfa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, subsetindex, pointindex, newValue);
	}
	short get_OverlapMultiAxes(short index)
	{
		short result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x101, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms, index);
		return result;
	}
	void put_OverlapMultiAxes(short index, short newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 ;
		InvokeHelper(0x101, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	unsigned long get_SubsetShades(short index)
	{
		unsigned long result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x106, DISPATCH_PROPERTYGET, VT_UI4, (void*)&result, parms, index);
		return result;
	}
	void put_SubsetShades(short index, unsigned long newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_UI4 ;
		InvokeHelper(0x106, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	double get_BestFitCoeffs(short sindex, short pindex)
	{
		double result;
		static BYTE parms[] = VTS_I2 VTS_I2 ;
		InvokeHelper(0x127, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms, sindex, pindex);
		return result;
	}
	void put_BestFitCoeffs(short sindex, short pindex, double newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 VTS_R8 ;
		InvokeHelper(0x127, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, sindex, pindex, newValue);
	}
	short get_SubsetDegree(short index)
	{
		short result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x128, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms, index);
		return result;
	}
	void put_SubsetDegree(short index, short newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 ;
		InvokeHelper(0x128, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	BOOL get_GraphAnnotationHotSpot(short index)
	{
		BOOL result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x129, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms, index);
		return result;
	}
	void put_GraphAnnotationHotSpot(short index, BOOL newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_BOOL ;
		InvokeHelper(0x129, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	CString get_PointLabels(short index)
	{
		CString result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x139, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms, index);
		return result;
	}
	void put_PointLabels(short index, LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_BSTR ;
		InvokeHelper(0x139, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	BOOL LoadFromURL(LPCTSTR szURL)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x13a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, szURL);
		return result;
	}
	BOOL PEloadfromfile(LPCTSTR szURL)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x13b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, szURL);
		return result;
	}
	BOOL PEsavetofile(LPCTSTR szURL)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x13c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, szURL);
		return result;
	}
	BOOL SerializeToFile(LPCTSTR szURL)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x146, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, szURL);
		return result;
	}
	VARIANT PNGToStream(short nWidth, short nHeight)
	{
		VARIANT result;
		static BYTE parms[] = VTS_I2 VTS_I2 ;
		InvokeHelper(0x147, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, nWidth, nHeight);
		return result;
	}
	VARIANT SerializeToStream()
	{
		VARIANT result;
		InvokeHelper(0x148, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT SaveToStream()
	{
		VARIANT result;
		InvokeHelper(0x149, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT JPEGToStream(short nWidth, short nHeight)
	{
		VARIANT result;
		static BYTE parms[] = VTS_I2 VTS_I2 ;
		InvokeHelper(0x14a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, nWidth, nHeight);
		return result;
	}
	long get_PointTypes(long subsetindex, long pointindex)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_I4 ;
		InvokeHelper(0x1cb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms, subsetindex, pointindex);
		return result;
	}
	void put_PointTypes(long subsetindex, long pointindex, long newValue)
	{
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_I4 ;
		InvokeHelper(0x1cb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, subsetindex, pointindex, newValue);
	}
	short get_SubsetForPointTypes(short index)
	{
		short result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x1cc, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms, index);
		return result;
	}
	void put_SubsetForPointTypes(short index, short newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 ;
		InvokeHelper(0x1cc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	short get_SubsetForPointColors(short index)
	{
		short result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x1cd, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms, index);
		return result;
	}
	void put_SubsetForPointColors(short index, short newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 ;
		InvokeHelper(0x1cd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	long get_TAType(short rowindex, short columnindex)
	{
		long result;
		static BYTE parms[] = VTS_I2 VTS_I2 ;
		InvokeHelper(0x1ce, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms, rowindex, columnindex);
		return result;
	}
	void put_TAType(short rowindex, short columnindex, long newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 VTS_I4 ;
		InvokeHelper(0x1ce, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, rowindex, columnindex, newValue);
	}
	BOOL get_TAHotSpot(short rowindex, short columnindex)
	{
		BOOL result;
		static BYTE parms[] = VTS_I2 VTS_I2 ;
		InvokeHelper(0x1cf, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms, rowindex, columnindex);
		return result;
	}
	void put_TAHotSpot(short rowindex, short columnindex, BOOL newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 VTS_BOOL ;
		InvokeHelper(0x1cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, rowindex, columnindex, newValue);
	}
	short get_TAColumnWidth(short columnindex)
	{
		short result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x1d0, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms, columnindex);
		return result;
	}
	void put_TAColumnWidth(short columnindex, short newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 ;
		InvokeHelper(0x1d0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, columnindex, newValue);
	}
	long get_TAJustification(short rowindex, short columnindex)
	{
		long result;
		static BYTE parms[] = VTS_I2 VTS_I2 ;
		InvokeHelper(0x1d1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms, rowindex, columnindex);
		return result;
	}
	void put_TAJustification(short rowindex, short columnindex, long newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 VTS_I4 ;
		InvokeHelper(0x1d1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, rowindex, columnindex, newValue);
	}
	BOOL get_HorzLineAnnotHotSpot(short index)
	{
		BOOL result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x1d2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms, index);
		return result;
	}
	void put_HorzLineAnnotHotSpot(short index, BOOL newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_BOOL ;
		InvokeHelper(0x1d2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	BOOL get_VertLineAnnotHotSpot(short index)
	{
		BOOL result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x1d3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms, index);
		return result;
	}
	void put_VertLineAnnotHotSpot(short index, BOOL newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_BOOL ;
		InvokeHelper(0x1d3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	long get_SubsetHatch(short index)
	{
		long result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x1d4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms, index);
		return result;
	}
	void put_SubsetHatch(short index, long newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_I4 ;
		InvokeHelper(0x1d4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	long get_PointHatch(long subsetindex, long pointindex)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_I4 ;
		InvokeHelper(0x1d5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms, subsetindex, pointindex);
		return result;
	}
	void put_PointHatch(long subsetindex, long pointindex, long newValue)
	{
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_I4 ;
		InvokeHelper(0x1d5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, subsetindex, pointindex, newValue);
	}
	long get_PlottingMethods(short index)
	{
		long result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x1d6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms, index);
		return result;
	}
	void put_PlottingMethods(short index, long newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_I4 ;
		InvokeHelper(0x1d6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	CString get_TAText(short rowindex, short columnindex)
	{
		CString result;
		static BYTE parms[] = VTS_I2 VTS_I2 ;
		InvokeHelper(0x1d7, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms, rowindex, columnindex);
		return result;
	}
	void put_TAText(short rowindex, short columnindex, LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 VTS_BSTR ;
		InvokeHelper(0x1d7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, rowindex, columnindex, newValue);
	}
	CString get_TAFonts(short rowindex, short columnindex)
	{
		CString result;
		static BYTE parms[] = VTS_I2 VTS_I2 ;
		InvokeHelper(0x1d8, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms, rowindex, columnindex);
		return result;
	}
	void put_TAFonts(short rowindex, short columnindex, LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 VTS_BSTR ;
		InvokeHelper(0x1d8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, rowindex, columnindex, newValue);
	}
	CString get_ContourLabels(short index)
	{
		CString result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x1d9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms, index);
		return result;
	}
	void put_ContourLabels(short index, LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_BSTR ;
		InvokeHelper(0x1d9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	unsigned long get_TAColor(short rowindex, short columnindex)
	{
		unsigned long result;
		static BYTE parms[] = VTS_I2 VTS_I2 ;
		InvokeHelper(0x1da, DISPATCH_PROPERTYGET, VT_UI4, (void*)&result, parms, rowindex, columnindex);
		return result;
	}
	void put_TAColor(short rowindex, short columnindex, unsigned long newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 VTS_UI4 ;
		InvokeHelper(0x1da, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, rowindex, columnindex, newValue);
	}
	double get_GridHotSpotValue(short index)
	{
		double result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x1db, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms, index);
		return result;
	}
	void put_GridHotSpotValue(short index, double newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_R8 ;
		InvokeHelper(0x1db, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	long get_CustomMenu(short menuindex, short submenuindex)
	{
		long result;
		static BYTE parms[] = VTS_I2 VTS_I2 ;
		InvokeHelper(0x1dc, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms, menuindex, submenuindex);
		return result;
	}
	void put_CustomMenu(short menuindex, short submenuindex, long newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 VTS_I4 ;
		InvokeHelper(0x1dc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, menuindex, submenuindex, newValue);
	}
	long get_CustomMenuState(short menuindex, short submenuindex)
	{
		long result;
		static BYTE parms[] = VTS_I2 VTS_I2 ;
		InvokeHelper(0x1dd, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms, menuindex, submenuindex);
		return result;
	}
	void put_CustomMenuState(short menuindex, short submenuindex, long newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 VTS_I4 ;
		InvokeHelper(0x1dd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, menuindex, submenuindex, newValue);
	}
	long get_CustomMenuLocation(short index)
	{
		long result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x1de, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms, index);
		return result;
	}
	void put_CustomMenuLocation(short index, long newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_I4 ;
		InvokeHelper(0x1de, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	CString get_CustomMenuText(short index)
	{
		CString result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x1df, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms, index);
		return result;
	}
	void put_CustomMenuText(short index, LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_BSTR ;
		InvokeHelper(0x1df, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, index, newValue);
	}
	void GetHotSpotData(short * pHotSpotType, long * pExtra1, long * pExtra2)
	{
		static BYTE parms[] = VTS_PI2 VTS_PI4 VTS_PI4 ;
		InvokeHelper(0x1e0, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pHotSpotType, pExtra1, pExtra2);
	}
	void GetRectGraph(short * pLeft, short * pTop, short * pRight, short * pBottom)
	{
		static BYTE parms[] = VTS_PI2 VTS_PI2 VTS_PI2 VTS_PI2 ;
		InvokeHelper(0x1e1, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pLeft, pTop, pRight, pBottom);
	}
	void GetRectAxis(short * pLeft, short * pTop, short * pRight, short * pBottom)
	{
		static BYTE parms[] = VTS_PI2 VTS_PI2 VTS_PI2 VTS_PI2 ;
		InvokeHelper(0x1e2, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pLeft, pTop, pRight, pBottom);
	}
	void GetSpringDayLight(short * pMonth, short * pDay, short * pHour)
	{
		static BYTE parms[] = VTS_PI2 VTS_PI2 VTS_PI2 ;
		InvokeHelper(0x1e3, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pMonth, pDay, pHour);
	}
	void SetSpringDayLight(short Month, short Day, short Hour)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 VTS_I2 ;
		InvokeHelper(0x1e4, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Month, Day, Hour);
	}
	void GetFallDayLight(short * pMonth, short * pDay, short * pHour)
	{
		static BYTE parms[] = VTS_PI2 VTS_PI2 VTS_PI2 ;
		InvokeHelper(0x1e5, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pMonth, pDay, pHour);
	}
	void SetFallDayLight(short Month, short Day, short Hour)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 VTS_I2 ;
		InvokeHelper(0x1e6, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Month, Day, Hour);
	}
	void GetExtraAxisX(float * pfMin, float * pfMax, BSTR * pszLabel, float * pfManualLine, float * pfManualTick, BSTR * pszFormat, short * pnShow, short * pnTick, BOOL * pbInvert, BOOL * pbLog, unsigned long * pdwColor)
	{
		static BYTE parms[] = VTS_PR4 VTS_PR4 VTS_PBSTR VTS_PR4 VTS_PR4 VTS_PBSTR VTS_PI2 VTS_PI2 VTS_PBOOL VTS_PBOOL VTS_PUI4 ;
		InvokeHelper(0x1e7, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pfMin, pfMax, pszLabel, pfManualLine, pfManualTick, pszFormat, pnShow, pnTick, pbInvert, pbLog, pdwColor);
	}
	void SetExtraAxisX(float fMin, float fMax, LPCTSTR szLabel, float fManualLine, float fManualTick, LPCTSTR szFormat, long nShowAxis, long nShowTick, BOOL bInvertAxis, BOOL bLog, unsigned long dwColor)
	{
		static BYTE parms[] = VTS_R4 VTS_R4 VTS_BSTR VTS_R4 VTS_R4 VTS_BSTR VTS_I4 VTS_I4 VTS_BOOL VTS_BOOL VTS_UI4 ;
		InvokeHelper(0x1e8, DISPATCH_METHOD, VT_EMPTY, NULL, parms, fMin, fMax, szLabel, fManualLine, fManualTick, szFormat, nShowAxis, nShowTick, bInvertAxis, bLog, dwColor);
	}
	void GetExtraAxisTX(float * pfMin, float * pfMax, BSTR * pszLabel, float * pfManualLine, float * pfManualTick, BSTR * pszFormat, short * pnShow, short * pnTick, BOOL * pbInvert, BOOL * pbLog, unsigned long * pdwColor)
	{
		static BYTE parms[] = VTS_PR4 VTS_PR4 VTS_PBSTR VTS_PR4 VTS_PR4 VTS_PBSTR VTS_PI2 VTS_PI2 VTS_PBOOL VTS_PBOOL VTS_PUI4 ;
		InvokeHelper(0x1e9, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pfMin, pfMax, pszLabel, pfManualLine, pfManualTick, pszFormat, pnShow, pnTick, pbInvert, pbLog, pdwColor);
	}
	void SetExtraAxisTX(float fMin, float fMax, LPCTSTR szLabel, float fManualLine, float fManualTick, LPCTSTR szFormat, long nShowAxis, long nShowTick, BOOL bInvert, BOOL bLog, unsigned long dwColor)
	{
		static BYTE parms[] = VTS_R4 VTS_R4 VTS_BSTR VTS_R4 VTS_R4 VTS_BSTR VTS_I4 VTS_I4 VTS_BOOL VTS_BOOL VTS_UI4 ;
		InvokeHelper(0x1ea, DISPATCH_METHOD, VT_EMPTY, NULL, parms, fMin, fMax, szLabel, fManualLine, fManualTick, szFormat, nShowAxis, nShowTick, bInvert, bLog, dwColor);
	}
	void GetGraphLoc(short * pnAxis, double * pdXValue, double * pdYValue)
	{
		static BYTE parms[] = VTS_PI2 VTS_PR8 VTS_PR8 ;
		InvokeHelper(0x1eb, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pnAxis, pdXValue, pdYValue);
	}
	void GetLastMouseMove(short * pnX, short * pnY)
	{
		static BYTE parms[] = VTS_PI2 VTS_PI2 ;
		InvokeHelper(0x1ec, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pnX, pnY);
	}
	BOOL PEdrawtable(short TableAnnotationIndex)
	{
		BOOL result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x1ed, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, TableAnnotationIndex);
		return result;
	}
	long PEgetmeta()
	{
		long result;
		InvokeHelper(0x1ee, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	BOOL PEresetimageEx(long nExtX, long nExtY, long nOrgX, long nOrgY)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_I4 VTS_I4 ;
		InvokeHelper(0x1ef, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, nExtX, nExtY, nOrgX, nOrgY);
		return result;
	}
	BOOL PEreset()
	{
		BOOL result;
		InvokeHelper(0x1f0, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	long PEgethelpcontext(long hWnd)
	{
		long result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x1f1, DISPATCH_METHOD, VT_I4, (void*)&result, parms, hWnd);
		return result;
	}
	BOOL PEcopyjpegtofile(short nXPixels, short nYPixels, LPCTSTR szFilename)
	{
		BOOL result;
		static BYTE parms[] = VTS_I2 VTS_I2 VTS_BSTR ;
		InvokeHelper(0x1f2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, nXPixels, nYPixels, szFilename);
		return result;
	}
	BOOL PEcopypngtofile(short nXPixels, short nYPixels, LPCTSTR szFilename)
	{
		BOOL result;
		static BYTE parms[] = VTS_I2 VTS_I2 VTS_BSTR ;
		InvokeHelper(0x1f3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, nXPixels, nYPixels, szFilename);
		return result;
	}
	BOOL PEcopypngtoclipboard(short nXPixels, short nYPixels)
	{
		BOOL result;
		static BYTE parms[] = VTS_I2 VTS_I2 ;
		InvokeHelper(0x1f4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, nXPixels, nYPixels);
		return result;
	}
	BOOL PEprintgraph(long Width, long Height, short Orient)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_I2 ;
		InvokeHelper(0x1f5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Width, Height, Orient);
		return result;
	}
	BOOL PEconvpixeltograph(long * pnAxis, long * pnX, long * pnY, double * pfX, double * pfY, BOOL bRightAxis, BOOL bTopAxis, BOOL bViceVersa)
	{
		BOOL result;
		static BYTE parms[] = VTS_PI4 VTS_PI4 VTS_PI4 VTS_PR8 VTS_PR8 VTS_BOOL VTS_BOOL VTS_BOOL ;
		InvokeHelper(0x1f6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, pnAxis, pnX, pnY, pfX, pfY, bRightAxis, bTopAxis, bViceVersa);
		return result;
	}
	BOOL PEgethotspot(short nX, short nY)
	{
		BOOL result;
		static BYTE parms[] = VTS_I2 VTS_I2 ;
		InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, nX, nY);
		return result;
	}
	BOOL PEpartialresetimage(long StartPoint, long PointsToAdd)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_I4 ;
		InvokeHelper(0x1f8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, StartPoint, PointsToAdd);
		return result;
	}
	BOOL LoadFromURLex(LPCTSTR szURL, long lex)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_I4 ;
		InvokeHelper(0x207, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, szURL, lex);
		return result;
	}
	BOOL get_SubsetObstacles(long nSubsetIndex)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x212, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms, nSubsetIndex);
		return result;
	}
	void put_SubsetObstacles(long nSubsetIndex, long newValue)
	{
		static BYTE parms[] = VTS_I4 VTS_I4 ;
		InvokeHelper(0x212, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, nSubsetIndex, newValue);
	}
	long get_GraphAnnotTextLocation(long nIndex)
	{
		long result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x213, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms, nIndex);
		return result;
	}
	void put_GraphAnnotTextLocation(long nIndex, long newValue)
	{
		static BYTE parms[] = VTS_I4 VTS_I4 ;
		InvokeHelper(0x213, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, nIndex, newValue);
	}
	void AboutBox()
	{
		InvokeHelper(DISPID_ABOUTBOX, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}

// Properties
//

long GethObject()
{
	long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}
void SethObject(long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}
long GetViewingStyle()
{
	long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}
void SetViewingStyle(long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}
BOOL GetPrepareImages()
{
	BOOL result;
	GetProperty(0x3, VT_BOOL, (void*)&result);
	return result;
}
void SetPrepareImages(BOOL propVal)
{
	SetProperty(0x3, VT_BOOL, propVal);
}
unsigned long GetGraphForeColor()
{
	unsigned long result;
	GetProperty(0x4, VT_UI4, (void*)&result);
	return result;
}
void SetGraphForeColor(unsigned long propVal)
{
	SetProperty(0x4, VT_UI4, propVal);
}
unsigned long GetGraphBackColor()
{
	unsigned long result;
	GetProperty(0x5, VT_UI4, (void*)&result);
	return result;
}
void SetGraphBackColor(unsigned long propVal)
{
	SetProperty(0x5, VT_UI4, propVal);
}
unsigned long GetDeskColor()
{
	unsigned long result;
	GetProperty(0x6, VT_UI4, (void*)&result);
	return result;
}
void SetDeskColor(unsigned long propVal)
{
	SetProperty(0x6, VT_UI4, propVal);
}
unsigned long GetTextColor()
{
	unsigned long result;
	GetProperty(0x7, VT_UI4, (void*)&result);
	return result;
}
void SetTextColor(unsigned long propVal)
{
	SetProperty(0x7, VT_UI4, propVal);
}
unsigned long GetShadowColor()
{
	unsigned long result;
	GetProperty(0x8, VT_UI4, (void*)&result);
	return result;
}
void SetShadowColor(unsigned long propVal)
{
	SetProperty(0x8, VT_UI4, propVal);
}
CString GetMainTitle()
{
	CString result;
	GetProperty(0x9, VT_BSTR, (void*)&result);
	return result;
}
void SetMainTitle(CString propVal)
{
	SetProperty(0x9, VT_BSTR, propVal);
}
CString GetSubTitle()
{
	CString result;
	GetProperty(0xa, VT_BSTR, (void*)&result);
	return result;
}
void SetSubTitle(CString propVal)
{
	SetProperty(0xa, VT_BSTR, propVal);
}
int GetSubsets()
{
	int result;
	GetProperty(0xb, VT_I4, (void*)&result);
	return result;
}
void SetSubsets(int propVal)
{
	SetProperty(0xb, VT_I4, propVal);
}
int GetPoints()
{
	int result;
	GetProperty(0xc, VT_I4, (void*)&result);
	return result;
}
void SetPoints(int propVal)
{
	SetProperty(0xc, VT_I4, propVal);
}
long GetDataPrecision()
{
	long result;
	GetProperty(0xd, VT_I4, (void*)&result);
	return result;
}
void SetDataPrecision(long propVal)
{
	SetProperty(0xd, VT_I4, propVal);
}
BOOL GetAllowCustomization()
{
	BOOL result;
	GetProperty(0xe, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowCustomization(BOOL propVal)
{
	SetProperty(0xe, VT_BOOL, propVal);
}
BOOL GetAllowExporting()
{
	BOOL result;
	GetProperty(0xf, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowExporting(BOOL propVal)
{
	SetProperty(0xf, VT_BOOL, propVal);
}
BOOL GetAllowMaximization()
{
	BOOL result;
	GetProperty(0x10, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowMaximization(BOOL propVal)
{
	SetProperty(0x10, VT_BOOL, propVal);
}
BOOL GetAllowPopup()
{
	BOOL result;
	GetProperty(0x11, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowPopup(BOOL propVal)
{
	SetProperty(0x11, VT_BOOL, propVal);
}
long GetAllowUserInterface()
{
	long result;
	GetProperty(0x12, VT_I4, (void*)&result);
	return result;
}
void SetAllowUserInterface(long propVal)
{
	SetProperty(0x12, VT_I4, propVal);
}
long GetFontSize()
{
	long result;
	GetProperty(0x13, VT_I4, (void*)&result);
	return result;
}
void SetFontSize(long propVal)
{
	SetProperty(0x13, VT_I4, propVal);
}
CString GetMainTitleFont()
{
	CString result;
	GetProperty(0x14, VT_BSTR, (void*)&result);
	return result;
}
void SetMainTitleFont(CString propVal)
{
	SetProperty(0x14, VT_BSTR, propVal);
}
BOOL GetMainTitleBold()
{
	BOOL result;
	GetProperty(0x15, VT_BOOL, (void*)&result);
	return result;
}
void SetMainTitleBold(BOOL propVal)
{
	SetProperty(0x15, VT_BOOL, propVal);
}
BOOL GetMainTitleItalic()
{
	BOOL result;
	GetProperty(0x16, VT_BOOL, (void*)&result);
	return result;
}
void SetMainTitleItalic(BOOL propVal)
{
	SetProperty(0x16, VT_BOOL, propVal);
}
BOOL GetMainTitleUnderline()
{
	BOOL result;
	GetProperty(0x17, VT_BOOL, (void*)&result);
	return result;
}
void SetMainTitleUnderline(BOOL propVal)
{
	SetProperty(0x17, VT_BOOL, propVal);
}
CString GetSubTitleFont()
{
	CString result;
	GetProperty(0x18, VT_BSTR, (void*)&result);
	return result;
}
void SetSubTitleFont(CString propVal)
{
	SetProperty(0x18, VT_BSTR, propVal);
}
BOOL GetSubTitleBold()
{
	BOOL result;
	GetProperty(0x19, VT_BOOL, (void*)&result);
	return result;
}
void SetSubTitleBold(BOOL propVal)
{
	SetProperty(0x19, VT_BOOL, propVal);
}
BOOL GetSubTitleItalic()
{
	BOOL result;
	GetProperty(0x1a, VT_BOOL, (void*)&result);
	return result;
}
void SetSubTitleItalic(BOOL propVal)
{
	SetProperty(0x1a, VT_BOOL, propVal);
}
BOOL GetSubTitleUnderline()
{
	BOOL result;
	GetProperty(0x1b, VT_BOOL, (void*)&result);
	return result;
}
void SetSubTitleUnderline(BOOL propVal)
{
	SetProperty(0x1b, VT_BOOL, propVal);
}
CString GetLabelFont()
{
	CString result;
	GetProperty(0x1c, VT_BSTR, (void*)&result);
	return result;
}
void SetLabelFont(CString propVal)
{
	SetProperty(0x1c, VT_BSTR, propVal);
}
BOOL GetLabelBold()
{
	BOOL result;
	GetProperty(0x1d, VT_BOOL, (void*)&result);
	return result;
}
void SetLabelBold(BOOL propVal)
{
	SetProperty(0x1d, VT_BOOL, propVal);
}
BOOL GetLabelItalic()
{
	BOOL result;
	GetProperty(0x1e, VT_BOOL, (void*)&result);
	return result;
}
void SetLabelItalic(BOOL propVal)
{
	SetProperty(0x1e, VT_BOOL, propVal);
}
BOOL GetLabelUnderline()
{
	BOOL result;
	GetProperty(0x1f, VT_BOOL, (void*)&result);
	return result;
}
void SetLabelUnderline(BOOL propVal)
{
	SetProperty(0x1f, VT_BOOL, propVal);
}
CString GetXAxisLabel()
{
	CString result;
	GetProperty(0x20, VT_BSTR, (void*)&result);
	return result;
}
void SetXAxisLabel(CString propVal)
{
	SetProperty(0x20, VT_BSTR, propVal);
}
CString GetYAxisLabel()
{
	CString result;
	GetProperty(0x21, VT_BSTR, (void*)&result);
	return result;
}
void SetYAxisLabel(CString propVal)
{
	SetProperty(0x21, VT_BSTR, propVal);
}
short GetScrollingSubsets()
{
	short result;
	GetProperty(0x22, VT_I2, (void*)&result);
	return result;
}
void SetScrollingSubsets(short propVal)
{
	SetProperty(0x22, VT_I2, propVal);
}
long GetVBoundaryTypes()
{
	long result;
	GetProperty(0x23, VT_I4, (void*)&result);
	return result;
}
void SetVBoundaryTypes(long propVal)
{
	SetProperty(0x23, VT_I4, propVal);
}
double GetUpperBoundValue()
{
	double result;
	GetProperty(0x24, VT_R8, (void*)&result);
	return result;
}
void SetUpperBoundValue(double propVal)
{
	SetProperty(0x24, VT_R8, propVal);
}
double GetLowerBoundValue()
{
	double result;
	GetProperty(0x25, VT_R8, (void*)&result);
	return result;
}
void SetLowerBoundValue(double propVal)
{
	SetProperty(0x25, VT_R8, propVal);
}
CString GetUpperBoundText()
{
	CString result;
	GetProperty(0x26, VT_BSTR, (void*)&result);
	return result;
}
void SetUpperBoundText(CString propVal)
{
	SetProperty(0x26, VT_BSTR, propVal);
}
CString GetLowerBoundText()
{
	CString result;
	GetProperty(0x27, VT_BSTR, (void*)&result);
	return result;
}
void SetLowerBoundText(CString propVal)
{
	SetProperty(0x27, VT_BSTR, propVal);
}
long GetXAxisScaleControl()
{
	long result;
	GetProperty(0x28, VT_I4, (void*)&result);
	return result;
}
void SetXAxisScaleControl(long propVal)
{
	SetProperty(0x28, VT_I4, propVal);
}
long GetYAxisScaleControl()
{
	long result;
	GetProperty(0x29, VT_I4, (void*)&result);
	return result;
}
void SetYAxisScaleControl(long propVal)
{
	SetProperty(0x29, VT_I4, propVal);
}
long GetPlottingMethod()
{
	long result;
	GetProperty(0x2a, VT_I4, (void*)&result);
	return result;
}
void SetPlottingMethod(long propVal)
{
	SetProperty(0x2a, VT_I4, propVal);
}
long GetGridLineControl()
{
	long result;
	GetProperty(0x2b, VT_I4, (void*)&result);
	return result;
}
void SetGridLineControl(long propVal)
{
	SetProperty(0x2b, VT_I4, propVal);
}
BOOL GetGridInFront()
{
	BOOL result;
	GetProperty(0x2c, VT_BOOL, (void*)&result);
	return result;
}
void SetGridInFront(BOOL propVal)
{
	SetProperty(0x2c, VT_BOOL, propVal);
}
BOOL GetNoScrollingSubsetControl()
{
	BOOL result;
	GetProperty(0x2d, VT_BOOL, (void*)&result);
	return result;
}
void SetNoScrollingSubsetControl(BOOL propVal)
{
	SetProperty(0x2d, VT_BOOL, propVal);
}
BOOL GetGraphDataLabels()
{
	BOOL result;
	GetProperty(0x2e, VT_BOOL, (void*)&result);
	return result;
}
void SetGraphDataLabels(BOOL propVal)
{
	SetProperty(0x2e, VT_BOOL, propVal);
}
BOOL GetTreatCompsAsNormal()
{
	BOOL result;
	GetProperty(0x2f, VT_BOOL, (void*)&result);
	return result;
}
void SetTreatCompsAsNormal(BOOL propVal)
{
	SetProperty(0x2f, VT_BOOL, propVal);
}
long GetDataShadows()
{
	long result;
	GetProperty(0x30, VT_I4, (void*)&result);
	return result;
}
void SetDataShadows(long propVal)
{
	SetProperty(0x30, VT_I4, propVal);
}
BOOL GetMonoWithSymbols()
{
	BOOL result;
	GetProperty(0x31, VT_BOOL, (void*)&result);
	return result;
}
void SetMonoWithSymbols(BOOL propVal)
{
	SetProperty(0x31, VT_BOOL, propVal);
}
BOOL GetThreedDialogs()
{
	BOOL result;
	GetProperty(0x32, VT_BOOL, (void*)&result);
	return result;
}
void SetThreedDialogs(BOOL propVal)
{
	SetProperty(0x32, VT_BOOL, propVal);
}
long GetDefOrientation()
{
	long result;
	GetProperty(0x33, VT_I4, (void*)&result);
	return result;
}
void SetDefOrientation(long propVal)
{
	SetProperty(0x33, VT_I4, propVal);
}
short GetObjectType()
{
	short result;
	GetProperty(0x34, VT_I2, (void*)&result);
	return result;
}
void SetObjectType(short propVal)
{
	SetProperty(0x34, VT_I2, propVal);
}
short GetScaleForXData()
{
	short result;
	GetProperty(0x35, VT_I2, (void*)&result);
	return result;
}
void SetScaleForXData(short propVal)
{
	SetProperty(0x35, VT_I2, propVal);
}
short GetScaleForYData()
{
	short result;
	GetProperty(0x36, VT_I2, (void*)&result);
	return result;
}
void SetScaleForYData(short propVal)
{
	SetProperty(0x36, VT_I2, propVal);
}
long GetManualScaleControlY()
{
	long result;
	GetProperty(0x37, VT_I4, (void*)&result);
	return result;
}
void SetManualScaleControlY(long propVal)
{
	SetProperty(0x37, VT_I4, propVal);
}
double GetManualMinY()
{
	double result;
	GetProperty(0x38, VT_R8, (void*)&result);
	return result;
}
void SetManualMinY(double propVal)
{
	SetProperty(0x38, VT_R8, propVal);
}
double GetManualMaxY()
{
	double result;
	GetProperty(0x39, VT_R8, (void*)&result);
	return result;
}
void SetManualMaxY(double propVal)
{
	SetProperty(0x39, VT_R8, propVal);
}
long GetManualScaleControlX()
{
	long result;
	GetProperty(0x3a, VT_I4, (void*)&result);
	return result;
}
void SetManualScaleControlX(long propVal)
{
	SetProperty(0x3a, VT_I4, propVal);
}
double GetManualMinX()
{
	double result;
	GetProperty(0x3b, VT_R8, (void*)&result);
	return result;
}
void SetManualMinX(double propVal)
{
	SetProperty(0x3b, VT_R8, propVal);
}
double GetManualMaxX()
{
	double result;
	GetProperty(0x3c, VT_R8, (void*)&result);
	return result;
}
void SetManualMaxX(double propVal)
{
	SetProperty(0x3c, VT_R8, propVal);
}
short GetComparisonSubsets()
{
	short result;
	GetProperty(0x3d, VT_I2, (void*)&result);
	return result;
}
void SetComparisonSubsets(short propVal)
{
	SetProperty(0x3d, VT_I2, propVal);
}
BOOL GetAllowSubsetHotSpots()
{
	BOOL result;
	GetProperty(0x3e, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowSubsetHotSpots(BOOL propVal)
{
	SetProperty(0x3e, VT_BOOL, propVal);
}
BOOL GetAllowGraphHotSpots()
{
	BOOL result;
	GetProperty(0x3f, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowGraphHotSpots(BOOL propVal)
{
	SetProperty(0x3f, VT_BOOL, propVal);
}
BOOL GetAllowDataHotSpots()
{
	BOOL result;
	GetProperty(0x40, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowDataHotSpots(BOOL propVal)
{
	SetProperty(0x40, VT_BOOL, propVal);
}
BOOL GetAllowCoordPrompting()
{
	BOOL result;
	GetProperty(0x41, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowCoordPrompting(BOOL propVal)
{
	SetProperty(0x41, VT_BOOL, propVal);
}
BOOL GetMarkDataPoints()
{
	BOOL result;
	GetProperty(0x42, VT_BOOL, (void*)&result);
	return result;
}
void SetMarkDataPoints(BOOL propVal)
{
	SetProperty(0x42, VT_BOOL, propVal);
}
short GetRYAxisComparisonSubsets()
{
	short result;
	GetProperty(0x43, VT_I2, (void*)&result);
	return result;
}
void SetRYAxisComparisonSubsets(short propVal)
{
	SetProperty(0x43, VT_I2, propVal);
}
CString GetRYAxisLabel()
{
	CString result;
	GetProperty(0x44, VT_BSTR, (void*)&result);
	return result;
}
void SetRYAxisLabel(CString propVal)
{
	SetProperty(0x44, VT_BSTR, propVal);
}
short GetScaleForRYData()
{
	short result;
	GetProperty(0x45, VT_I2, (void*)&result);
	return result;
}
void SetScaleForRYData(short propVal)
{
	SetProperty(0x45, VT_I2, propVal);
}
long GetRYAxisScaleControl()
{
	long result;
	GetProperty(0x46, VT_I4, (void*)&result);
	return result;
}
void SetRYAxisScaleControl(long propVal)
{
	SetProperty(0x46, VT_I4, propVal);
}
long GetManualScaleControlRY()
{
	long result;
	GetProperty(0x47, VT_I4, (void*)&result);
	return result;
}
void SetManualScaleControlRY(long propVal)
{
	SetProperty(0x47, VT_I4, propVal);
}
double GetManualMinRY()
{
	double result;
	GetProperty(0x48, VT_R8, (void*)&result);
	return result;
}
void SetManualMinRY(double propVal)
{
	SetProperty(0x48, VT_R8, propVal);
}
double GetManualMaxRY()
{
	double result;
	GetProperty(0x49, VT_R8, (void*)&result);
	return result;
}
void SetManualMaxRY(double propVal)
{
	SetProperty(0x49, VT_R8, propVal);
}
BOOL GetAllowPlotCustomization()
{
	BOOL result;
	GetProperty(0x4a, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowPlotCustomization(BOOL propVal)
{
	SetProperty(0x4a, VT_BOOL, propVal);
}
BOOL GetAllowBubble()
{
	BOOL result;
	GetProperty(0x4b, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowBubble(BOOL propVal)
{
	SetProperty(0x4b, VT_BOOL, propVal);
}
BOOL GetAllowBestFitCurve()
{
	BOOL result;
	GetProperty(0x4c, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowBestFitCurve(BOOL propVal)
{
	SetProperty(0x4c, VT_BOOL, propVal);
}
BOOL GetAllowSpline()
{
	BOOL result;
	GetProperty(0x4d, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowSpline(BOOL propVal)
{
	SetProperty(0x4d, VT_BOOL, propVal);
}
BOOL GetNegativeFromXAxis()
{
	BOOL result;
	GetProperty(0x4e, VT_BOOL, (void*)&result);
	return result;
}
void SetNegativeFromXAxis(BOOL propVal)
{
	SetProperty(0x4e, VT_BOOL, propVal);
}
BOOL GetManualXAxisTicknLine()
{
	BOOL result;
	GetProperty(0x4f, VT_BOOL, (void*)&result);
	return result;
}
void SetManualXAxisTicknLine(BOOL propVal)
{
	SetProperty(0x4f, VT_BOOL, propVal);
}
BOOL GetManualYAxisTicknLine()
{
	BOOL result;
	GetProperty(0x50, VT_BOOL, (void*)&result);
	return result;
}
void SetManualYAxisTicknLine(BOOL propVal)
{
	SetProperty(0x50, VT_BOOL, propVal);
}
BOOL GetManualRYAxisTicknLine()
{
	BOOL result;
	GetProperty(0x51, VT_BOOL, (void*)&result);
	return result;
}
void SetManualRYAxisTicknLine(BOOL propVal)
{
	SetProperty(0x51, VT_BOOL, propVal);
}
long GetBubbleSize()
{
	long result;
	GetProperty(0x52, VT_I4, (void*)&result);
	return result;
}
void SetBubbleSize(long propVal)
{
	SetProperty(0x52, VT_I4, propVal);
}
long GetPointSize()
{
	long result;
	GetProperty(0x53, VT_I4, (void*)&result);
	return result;
}
void SetPointSize(long propVal)
{
	SetProperty(0x53, VT_I4, propVal);
}
long GetBestFitDegree()
{
	long result;
	GetProperty(0x54, VT_I4, (void*)&result);
	return result;
}
void SetBestFitDegree(long propVal)
{
	SetProperty(0x54, VT_I4, propVal);
}
long GetCurveGranularity()
{
	long result;
	GetProperty(0x55, VT_I4, (void*)&result);
	return result;
}
void SetCurveGranularity(long propVal)
{
	SetProperty(0x55, VT_I4, propVal);
}
long GetAllowDataLabels()
{
	long result;
	GetProperty(0x56, VT_I4, (void*)&result);
	return result;
}
void SetAllowDataLabels(long propVal)
{
	SetProperty(0x56, VT_I4, propVal);
}
double GetManualXAxisTick()
{
	double result;
	GetProperty(0x57, VT_R8, (void*)&result);
	return result;
}
void SetManualXAxisTick(double propVal)
{
	SetProperty(0x57, VT_R8, propVal);
}
double GetManualXAxisLine()
{
	double result;
	GetProperty(0x58, VT_R8, (void*)&result);
	return result;
}
void SetManualXAxisLine(double propVal)
{
	SetProperty(0x58, VT_R8, propVal);
}
double GetManualYAxisTick()
{
	double result;
	GetProperty(0x59, VT_R8, (void*)&result);
	return result;
}
void SetManualYAxisTick(double propVal)
{
	SetProperty(0x59, VT_R8, propVal);
}
double GetManualYAxisLine()
{
	double result;
	GetProperty(0x5a, VT_R8, (void*)&result);
	return result;
}
void SetManualYAxisLine(double propVal)
{
	SetProperty(0x5a, VT_R8, propVal);
}
double GetManualRYAxisTick()
{
	double result;
	GetProperty(0x5b, VT_R8, (void*)&result);
	return result;
}
void SetManualRYAxisTick(double propVal)
{
	SetProperty(0x5b, VT_R8, propVal);
}
double GetManualRYAxisLine()
{
	double result;
	GetProperty(0x5c, VT_R8, (void*)&result);
	return result;
}
void SetManualRYAxisLine(double propVal)
{
	SetProperty(0x5c, VT_R8, propVal);
}
double GetNullDataValueY()
{
	double result;
	GetProperty(0x5d, VT_R8, (void*)&result);
	return result;
}
void SetNullDataValueY(double propVal)
{
	SetProperty(0x5d, VT_R8, propVal);
}
BOOL GetAllowLine()
{
	BOOL result;
	GetProperty(0x5e, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowLine(BOOL propVal)
{
	SetProperty(0x5e, VT_BOOL, propVal);
}
BOOL GetAllowStick()
{
	BOOL result;
	GetProperty(0x5f, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowStick(BOOL propVal)
{
	SetProperty(0x5f, VT_BOOL, propVal);
}
BOOL GetAllowPoint()
{
	BOOL result;
	GetProperty(0x60, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowPoint(BOOL propVal)
{
	SetProperty(0x60, VT_BOOL, propVal);
}
BOOL GetAllowBestFitLine()
{
	BOOL result;
	GetProperty(0x61, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowBestFitLine(BOOL propVal)
{
	SetProperty(0x61, VT_BOOL, propVal);
}
long GetAllowZooming()
{
	long result;
	GetProperty(0x62, VT_I4, (void*)&result);
	return result;
}
void SetAllowZooming(long propVal)
{
	SetProperty(0x62, VT_I4, propVal);
}
BOOL GetZoomMode()
{
	BOOL result;
	GetProperty(0x63, VT_BOOL, (void*)&result);
	return result;
}
void SetZoomMode(BOOL propVal)
{
	SetProperty(0x63, VT_BOOL, propVal);
}
double GetZoomMinX()
{
	double result;
	GetProperty(0x64, VT_R8, (void*)&result);
	return result;
}
void SetZoomMinX(double propVal)
{
	SetProperty(0x64, VT_R8, propVal);
}
double GetZoomMaxX()
{
	double result;
	GetProperty(0x65, VT_R8, (void*)&result);
	return result;
}
void SetZoomMaxX(double propVal)
{
	SetProperty(0x65, VT_R8, propVal);
}
double GetZoomMinY()
{
	double result;
	GetProperty(0x66, VT_R8, (void*)&result);
	return result;
}
void SetZoomMinY(double propVal)
{
	SetProperty(0x66, VT_R8, propVal);
}
double GetZoomMaxY()
{
	double result;
	GetProperty(0x67, VT_R8, (void*)&result);
	return result;
}
void SetZoomMaxY(double propVal)
{
	SetProperty(0x67, VT_R8, propVal);
}
BOOL GetForceRightYAxis()
{
	BOOL result;
	GetProperty(0x68, VT_BOOL, (void*)&result);
	return result;
}
void SetForceRightYAxis(BOOL propVal)
{
	SetProperty(0x68, VT_BOOL, propVal);
}
BOOL GetAllowPointsPlusLine()
{
	BOOL result;
	GetProperty(0x69, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowPointsPlusLine(BOOL propVal)
{
	SetProperty(0x69, VT_BOOL, propVal);
}
BOOL GetAllowPointsPlusSpline()
{
	BOOL result;
	GetProperty(0x6a, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowPointsPlusSpline(BOOL propVal)
{
	SetProperty(0x6a, VT_BOOL, propVal);
}
long GetSymbolFrequency()
{
	long result;
	GetProperty(0x6b, VT_I4, (void*)&result);
	return result;
}
void SetSymbolFrequency(long propVal)
{
	SetProperty(0x6b, VT_I4, propVal);
}
long GetPEactions()
{
	long result;
	GetProperty(0x6c, VT_I4, (void*)&result);
	return result;
}
void SetPEactions(long propVal)
{
	SetProperty(0x6c, VT_I4, propVal);
}
short GetPEnarg1()
{
	short result;
	GetProperty(0x6d, VT_I2, (void*)&result);
	return result;
}
void SetPEnarg1(short propVal)
{
	SetProperty(0x6d, VT_I2, propVal);
}
short GetPEnarg2()
{
	short result;
	GetProperty(0x6e, VT_I2, (void*)&result);
	return result;
}
void SetPEnarg2(short propVal)
{
	SetProperty(0x6e, VT_I2, propVal);
}
CString GetPEstrarg1()
{
	CString result;
	GetProperty(0x6f, VT_BSTR, (void*)&result);
	return result;
}
void SetPEstrarg1(CString propVal)
{
	SetProperty(0x6f, VT_BSTR, propVal);
}
long GetCursorMode()
{
	long result;
	GetProperty(0x89, VT_I4, (void*)&result);
	return result;
}
void SetCursorMode(long propVal)
{
	SetProperty(0x89, VT_I4, propVal);
}
short GetCursorSubset()
{
	short result;
	GetProperty(0x8a, VT_I2, (void*)&result);
	return result;
}
void SetCursorSubset(short propVal)
{
	SetProperty(0x8a, VT_I2, propVal);
}
int GetCursorPoint()
{
	int result;
	GetProperty(0x8b, VT_I4, (void*)&result);
	return result;
}
void SetCursorPoint(int propVal)
{
	SetProperty(0x8b, VT_I4, propVal);
}
long GetCursorPromptStyle()
{
	long result;
	GetProperty(0x8c, VT_I4, (void*)&result);
	return result;
}
void SetCursorPromptStyle(long propVal)
{
	SetProperty(0x8c, VT_I4, propVal);
}
BOOL GetCursorPromptTracking()
{
	BOOL result;
	GetProperty(0x8d, VT_BOOL, (void*)&result);
	return result;
}
void SetCursorPromptTracking(BOOL propVal)
{
	SetProperty(0x8d, VT_BOOL, propVal);
}
BOOL GetMouseCursorControl()
{
	BOOL result;
	GetProperty(0x8e, VT_BOOL, (void*)&result);
	return result;
}
void SetMouseCursorControl(BOOL propVal)
{
	SetProperty(0x8e, VT_BOOL, propVal);
}
BOOL GetShowAnnotations()
{
	BOOL result;
	GetProperty(0x8f, VT_BOOL, (void*)&result);
	return result;
}
void SetShowAnnotations(BOOL propVal)
{
	SetProperty(0x8f, VT_BOOL, propVal);
}
BOOL GetAllowGraphAnnotHotSpots()
{
	BOOL result;
	GetProperty(0x90, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowGraphAnnotHotSpots(BOOL propVal)
{
	SetProperty(0x90, VT_BOOL, propVal);
}
short GetGraphAnnotationTextSize()
{
	short result;
	GetProperty(0x91, VT_I2, (void*)&result);
	return result;
}
void SetGraphAnnotationTextSize(short propVal)
{
	SetProperty(0x91, VT_I2, propVal);
}
BOOL GetAllowAnnotationControl()
{
	BOOL result;
	GetProperty(0x99, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowAnnotationControl(BOOL propVal)
{
	SetProperty(0x99, VT_BOOL, propVal);
}
BOOL GetAnnotationsInFront()
{
	BOOL result;
	GetProperty(0x9a, VT_BOOL, (void*)&result);
	return result;
}
void SetAnnotationsInFront(BOOL propVal)
{
	SetProperty(0x9a, VT_BOOL, propVal);
}
short GetCursorPageAmount()
{
	short result;
	GetProperty(0x9b, VT_I2, (void*)&result);
	return result;
}
void SetCursorPageAmount(short propVal)
{
	SetProperty(0x9b, VT_I2, propVal);
}
double GetLineGapThreshold()
{
	double result;
	GetProperty(0x9c, VT_R8, (void*)&result);
	return result;
}
void SetLineGapThreshold(double propVal)
{
	SetProperty(0x9c, VT_R8, propVal);
}
BOOL GetShowGraphAnnotations()
{
	BOOL result;
	GetProperty(0xa5, VT_BOOL, (void*)&result);
	return result;
}
void SetShowGraphAnnotations(BOOL propVal)
{
	SetProperty(0xa5, VT_BOOL, propVal);
}
BOOL GetShowXAxisAnnotations()
{
	BOOL result;
	GetProperty(0xa6, VT_BOOL, (void*)&result);
	return result;
}
void SetShowXAxisAnnotations(BOOL propVal)
{
	SetProperty(0xa6, VT_BOOL, propVal);
}
BOOL GetShowYAxisAnnotations()
{
	BOOL result;
	GetProperty(0xa7, VT_BOOL, (void*)&result);
	return result;
}
void SetShowYAxisAnnotations(BOOL propVal)
{
	SetProperty(0xa7, VT_BOOL, propVal);
}
BOOL GetShowHorzLineAnnotations()
{
	BOOL result;
	GetProperty(0xa8, VT_BOOL, (void*)&result);
	return result;
}
void SetShowHorzLineAnnotations(BOOL propVal)
{
	SetProperty(0xa8, VT_BOOL, propVal);
}
BOOL GetShowVertLineAnnotations()
{
	BOOL result;
	GetProperty(0xa9, VT_BOOL, (void*)&result);
	return result;
}
void SetShowVertLineAnnotations(BOOL propVal)
{
	SetProperty(0xa9, VT_BOOL, propVal);
}
BOOL GetAllowXAxisAnnotHotSpots()
{
	BOOL result;
	GetProperty(0xaa, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowXAxisAnnotHotSpots(BOOL propVal)
{
	SetProperty(0xaa, VT_BOOL, propVal);
}
BOOL GetAllowYAxisAnnotHotSpots()
{
	BOOL result;
	GetProperty(0xab, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowYAxisAnnotHotSpots(BOOL propVal)
{
	SetProperty(0xab, VT_BOOL, propVal);
}
BOOL GetAllowHorzLineAnnotHotSpots()
{
	BOOL result;
	GetProperty(0xac, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowHorzLineAnnotHotSpots(BOOL propVal)
{
	SetProperty(0xac, VT_BOOL, propVal);
}
BOOL GetAllowVertLineAnnotHotSpots()
{
	BOOL result;
	GetProperty(0xad, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowVertLineAnnotHotSpots(BOOL propVal)
{
	SetProperty(0xad, VT_BOOL, propVal);
}
short GetAxesAnnotationTextSize()
{
	short result;
	GetProperty(0xb1, VT_I2, (void*)&result);
	return result;
}
void SetAxesAnnotationTextSize(short propVal)
{
	SetProperty(0xb1, VT_I2, propVal);
}
short GetLineAnnotationTextSize()
{
	short result;
	GetProperty(0xb2, VT_I2, (void*)&result);
	return result;
}
void SetLineAnnotationTextSize(short propVal)
{
	SetProperty(0xb2, VT_I2, propVal);
}
long GetZoomInterfaceOnly()
{
	long result;
	GetProperty(0xb8, VT_I4, (void*)&result);
	return result;
}
void SetZoomInterfaceOnly(long propVal)
{
	SetProperty(0xb8, VT_I4, propVal);
}
short GetVertScrollPos()
{
	short result;
	GetProperty(0xb9, VT_I2, (void*)&result);
	return result;
}
void SetVertScrollPos(short propVal)
{
	SetProperty(0xb9, VT_I2, propVal);
}
short GetHorzScrollPos()
{
	short result;
	GetProperty(0xba, VT_I2, (void*)&result);
	return result;
}
void SetHorzScrollPos(short propVal)
{
	SetProperty(0xba, VT_I2, propVal);
}
BOOL GetAllowDebugOutput()
{
	BOOL result;
	GetProperty(0xbb, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowDebugOutput(BOOL propVal)
{
	SetProperty(0xbb, VT_BOOL, propVal);
}
BOOL GetVertOrient90Degrees()
{
	BOOL result;
	GetProperty(0xbc, VT_BOOL, (void*)&result);
	return result;
}
void SetVertOrient90Degrees(BOOL propVal)
{
	SetProperty(0xbc, VT_BOOL, propVal);
}
short GetWorkingAxis()
{
	short result;
	GetProperty(0xc3, VT_I2, (void*)&result);
	return result;
}
void SetWorkingAxis(short propVal)
{
	SetProperty(0xc3, VT_I2, propVal);
}
BOOL GetLogScaleExpLabels()
{
	BOOL result;
	GetProperty(0xc4, VT_BOOL, (void*)&result);
	return result;
}
void SetLogScaleExpLabels(BOOL propVal)
{
	SetProperty(0xc4, VT_BOOL, propVal);
}
BOOL GetUsingYDataII()
{
	BOOL result;
	GetProperty(0xc5, VT_BOOL, (void*)&result);
	return result;
}
void SetUsingYDataII(BOOL propVal)
{
	SetProperty(0xc5, VT_BOOL, propVal);
}
long GetPlottingMethodII()
{
	long result;
	GetProperty(0xc6, VT_I4, (void*)&result);
	return result;
}
void SetPlottingMethodII(long propVal)
{
	SetProperty(0xc6, VT_I4, propVal);
}
double GetBarWidth()
{
	double result;
	GetProperty(0xc7, VT_R8, (void*)&result);
	return result;
}
void SetBarWidth(double propVal)
{
	SetProperty(0xc7, VT_R8, propVal);
}
BOOL GetYAxisOnRight()
{
	BOOL result;
	GetProperty(0xc8, VT_BOOL, (void*)&result);
	return result;
}
void SetYAxisOnRight(BOOL propVal)
{
	SetProperty(0xc8, VT_BOOL, propVal);
}
BOOL GetFocalRect()
{
	BOOL result;
	GetProperty(0xcb, VT_BOOL, (void*)&result);
	return result;
}
void SetFocalRect(BOOL propVal)
{
	SetProperty(0xcb, VT_BOOL, propVal);
}
float GetFontSizeGlobalCntl()
{
	float result;
	GetProperty(0xcc, VT_R4, (void*)&result);
	return result;
}
void SetFontSizeGlobalCntl(float propVal)
{
	SetProperty(0xcc, VT_R4, propVal);
}
float GetFontSizeTitleCntl()
{
	float result;
	GetProperty(0xcd, VT_R4, (void*)&result);
	return result;
}
void SetFontSizeTitleCntl(float propVal)
{
	SetProperty(0xcd, VT_R4, propVal);
}
BOOL GetSubsetByPoint()
{
	BOOL result;
	GetProperty(0xce, VT_BOOL, (void*)&result);
	return result;
}
void SetSubsetByPoint(BOOL propVal)
{
	SetProperty(0xce, VT_BOOL, propVal);
}
long GetShowYAxis()
{
	long result;
	GetProperty(0xcf, VT_I4, (void*)&result);
	return result;
}
void SetShowYAxis(long propVal)
{
	SetProperty(0xcf, VT_I4, propVal);
}
long GetShowRYAxis()
{
	long result;
	GetProperty(0xd0, VT_I4, (void*)&result);
	return result;
}
void SetShowRYAxis(long propVal)
{
	SetProperty(0xd0, VT_I4, propVal);
}
long GetShowXAxis()
{
	long result;
	GetProperty(0xd1, VT_I4, (void*)&result);
	return result;
}
void SetShowXAxis(long propVal)
{
	SetProperty(0xd1, VT_I4, propVal);
}
long GetGridStyle()
{
	long result;
	GetProperty(0xd2, VT_I4, (void*)&result);
	return result;
}
void SetGridStyle(long propVal)
{
	SetProperty(0xd2, VT_I4, propVal);
}
BOOL GetInvertedYAxis()
{
	BOOL result;
	GetProperty(0xd3, VT_BOOL, (void*)&result);
	return result;
}
void SetInvertedYAxis(BOOL propVal)
{
	SetProperty(0xd3, VT_BOOL, propVal);
}
BOOL GetInvertedRYAxis()
{
	BOOL result;
	GetProperty(0xd4, VT_BOOL, (void*)&result);
	return result;
}
void SetInvertedRYAxis(BOOL propVal)
{
	SetProperty(0xd4, VT_BOOL, propVal);
}
unsigned long GetYAxisColor()
{
	unsigned long result;
	GetProperty(0xd5, VT_UI4, (void*)&result);
	return result;
}
void SetYAxisColor(unsigned long propVal)
{
	SetProperty(0xd5, VT_UI4, propVal);
}
unsigned long GetRYAxisColor()
{
	unsigned long result;
	GetProperty(0xd6, VT_UI4, (void*)&result);
	return result;
}
void SetRYAxisColor(unsigned long propVal)
{
	SetProperty(0xd6, VT_UI4, propVal);
}
unsigned long GetXAxisColor()
{
	unsigned long result;
	GetProperty(0xd7, VT_UI4, (void*)&result);
	return result;
}
void SetXAxisColor(unsigned long propVal)
{
	SetProperty(0xd7, VT_UI4, propVal);
}
float GetFontSizeLegendCntl()
{
	float result;
	GetProperty(0xd8, VT_R4, (void*)&result);
	return result;
}
void SetFontSizeLegendCntl(float propVal)
{
	SetProperty(0xd8, VT_R4, propVal);
}
BOOL GetYAxisLongTicks()
{
	BOOL result;
	GetProperty(0xd9, VT_BOOL, (void*)&result);
	return result;
}
void SetYAxisLongTicks(BOOL propVal)
{
	SetProperty(0xd9, VT_BOOL, propVal);
}
BOOL GetRYAxisLongTicks()
{
	BOOL result;
	GetProperty(0xda, VT_BOOL, (void*)&result);
	return result;
}
void SetRYAxisLongTicks(BOOL propVal)
{
	SetProperty(0xda, VT_BOOL, propVal);
}
long GetMultiAxesSeparators()
{
	long result;
	GetProperty(0xdb, VT_I4, (void*)&result);
	return result;
}
void SetMultiAxesSeparators(long propVal)
{
	SetProperty(0xdb, VT_I4, propVal);
}
short GetZoomMinAxis()
{
	short result;
	GetProperty(0xdc, VT_I2, (void*)&result);
	return result;
}
void SetZoomMinAxis(short propVal)
{
	SetProperty(0xdc, VT_I2, propVal);
}
short GetZoomMaxAxis()
{
	short result;
	GetProperty(0xdd, VT_I2, (void*)&result);
	return result;
}
void SetZoomMaxAxis(short propVal)
{
	SetProperty(0xdd, VT_I2, propVal);
}
BOOL GetScrollingHorzZoom()
{
	BOOL result;
	GetProperty(0xdf, VT_BOOL, (void*)&result);
	return result;
}
void SetScrollingHorzZoom(BOOL propVal)
{
	SetProperty(0xdf, VT_BOOL, propVal);
}
BOOL GetNoRandomPointsToExport()
{
	BOOL result;
	GetProperty(0xe0, VT_BOOL, (void*)&result);
	return result;
}
void SetNoRandomPointsToExport(BOOL propVal)
{
	SetProperty(0xe0, VT_BOOL, propVal);
}
BOOL GetXAxisVertNumbering()
{
	BOOL result;
	GetProperty(0xe1, VT_BOOL, (void*)&result);
	return result;
}
void SetXAxisVertNumbering(BOOL propVal)
{
	SetProperty(0xe1, VT_BOOL, propVal);
}
double GetNullDataValueX()
{
	double result;
	GetProperty(0xe2, VT_R8, (void*)&result);
	return result;
}
void SetNullDataValueX(double propVal)
{
	SetProperty(0xe2, VT_R8, propVal);
}
BOOL GetUsingXDataII()
{
	BOOL result;
	GetProperty(0xe3, VT_BOOL, (void*)&result);
	return result;
}
void SetUsingXDataII(BOOL propVal)
{
	SetProperty(0xe3, VT_BOOL, propVal);
}
long GetDateTimeMode()
{
	long result;
	GetProperty(0xe4, VT_I4, (void*)&result);
	return result;
}
void SetDateTimeMode(long propVal)
{
	SetProperty(0xe4, VT_I4, propVal);
}
long GetSpecificPlotMode()
{
	long result;
	GetProperty(0xe5, VT_I4, (void*)&result);
	return result;
}
void SetSpecificPlotMode(long propVal)
{
	SetProperty(0xe5, VT_I4, propVal);
}
BOOL GetAllowBar()
{
	BOOL result;
	GetProperty(0xe6, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowBar(BOOL propVal)
{
	SetProperty(0xe6, VT_BOOL, propVal);
}
BOOL GetAllowArea()
{
	BOOL result;
	GetProperty(0xe7, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowArea(BOOL propVal)
{
	SetProperty(0xe7, VT_BOOL, propVal);
}
short GetTXAxisComparisonSubsets()
{
	short result;
	GetProperty(0xe8, VT_I2, (void*)&result);
	return result;
}
void SetTXAxisComparisonSubsets(short propVal)
{
	SetProperty(0xe8, VT_I2, propVal);
}
CString GetTXAxisLabel()
{
	CString result;
	GetProperty(0xe9, VT_BSTR, (void*)&result);
	return result;
}
void SetTXAxisLabel(CString propVal)
{
	SetProperty(0xe9, VT_BSTR, propVal);
}
short GetScaleForTXData()
{
	short result;
	GetProperty(0xea, VT_I2, (void*)&result);
	return result;
}
void SetScaleForTXData(short propVal)
{
	SetProperty(0xea, VT_I2, propVal);
}
long GetTXAxisScaleControl()
{
	long result;
	GetProperty(0xeb, VT_I4, (void*)&result);
	return result;
}
void SetTXAxisScaleControl(long propVal)
{
	SetProperty(0xeb, VT_I4, propVal);
}
long GetManualScaleControlTX()
{
	long result;
	GetProperty(0xec, VT_I4, (void*)&result);
	return result;
}
void SetManualScaleControlTX(long propVal)
{
	SetProperty(0xec, VT_I4, propVal);
}
double GetManualMinTX()
{
	double result;
	GetProperty(0xed, VT_R8, (void*)&result);
	return result;
}
void SetManualMinTX(double propVal)
{
	SetProperty(0xed, VT_R8, propVal);
}
double GetManualMaxTX()
{
	double result;
	GetProperty(0xee, VT_R8, (void*)&result);
	return result;
}
void SetManualMaxTX(double propVal)
{
	SetProperty(0xee, VT_R8, propVal);
}
BOOL GetManualTXAxisTicknLine()
{
	BOOL result;
	GetProperty(0xef, VT_BOOL, (void*)&result);
	return result;
}
void SetManualTXAxisTicknLine(BOOL propVal)
{
	SetProperty(0xef, VT_BOOL, propVal);
}
double GetManualTXAxisTick()
{
	double result;
	GetProperty(0xf0, VT_R8, (void*)&result);
	return result;
}
void SetManualTXAxisTick(double propVal)
{
	SetProperty(0xf0, VT_R8, propVal);
}
double GetManualTXAxisLine()
{
	double result;
	GetProperty(0xf1, VT_R8, (void*)&result);
	return result;
}
void SetManualTXAxisLine(double propVal)
{
	SetProperty(0xf1, VT_R8, propVal);
}
BOOL GetForceTopXAxis()
{
	BOOL result;
	GetProperty(0xf2, VT_BOOL, (void*)&result);
	return result;
}
void SetForceTopXAxis(BOOL propVal)
{
	SetProperty(0xf2, VT_BOOL, propVal);
}
BOOL GetXAxisOnTop()
{
	BOOL result;
	GetProperty(0xf3, VT_BOOL, (void*)&result);
	return result;
}
void SetXAxisOnTop(BOOL propVal)
{
	SetProperty(0xf3, VT_BOOL, propVal);
}
long GetShowTXAxis()
{
	long result;
	GetProperty(0xf4, VT_I4, (void*)&result);
	return result;
}
void SetShowTXAxis(long propVal)
{
	SetProperty(0xf4, VT_I4, propVal);
}
BOOL GetInvertedXAxis()
{
	BOOL result;
	GetProperty(0xf5, VT_BOOL, (void*)&result);
	return result;
}
void SetInvertedXAxis(BOOL propVal)
{
	SetProperty(0xf5, VT_BOOL, propVal);
}
BOOL GetInvertedTXAxis()
{
	BOOL result;
	GetProperty(0xf6, VT_BOOL, (void*)&result);
	return result;
}
void SetInvertedTXAxis(BOOL propVal)
{
	SetProperty(0xf6, VT_BOOL, propVal);
}
unsigned long GetTXAxisColor()
{
	unsigned long result;
	GetProperty(0xf7, VT_UI4, (void*)&result);
	return result;
}
void SetTXAxisColor(unsigned long propVal)
{
	SetProperty(0xf7, VT_UI4, propVal);
}
BOOL GetXAxisLongTicks()
{
	BOOL result;
	GetProperty(0xf8, VT_BOOL, (void*)&result);
	return result;
}
void SetXAxisLongTicks(BOOL propVal)
{
	SetProperty(0xf8, VT_BOOL, propVal);
}
BOOL GetTXAxisLongTicks()
{
	BOOL result;
	GetProperty(0xf9, VT_BOOL, (void*)&result);
	return result;
}
void SetTXAxisLongTicks(BOOL propVal)
{
	SetProperty(0xf9, VT_BOOL, propVal);
}
CString GetLeftMargin()
{
	CString result;
	GetProperty(0xfb, VT_BSTR, (void*)&result);
	return result;
}
void SetLeftMargin(CString propVal)
{
	SetProperty(0xfb, VT_BSTR, propVal);
}
CString GetTopMargin()
{
	CString result;
	GetProperty(0xfc, VT_BSTR, (void*)&result);
	return result;
}
void SetTopMargin(CString propVal)
{
	SetProperty(0xfc, VT_BSTR, propVal);
}
CString GetRightMargin()
{
	CString result;
	GetProperty(0xfd, VT_BSTR, (void*)&result);
	return result;
}
void SetRightMargin(CString propVal)
{
	SetProperty(0xfd, VT_BSTR, propVal);
}
CString GetBottomMargin()
{
	CString result;
	GetProperty(0xfe, VT_BSTR, (void*)&result);
	return result;
}
void SetBottomMargin(CString propVal)
{
	SetProperty(0xfe, VT_BSTR, propVal);
}
BOOL GetAllowOleExport()
{
	BOOL result;
	GetProperty(0xff, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowOleExport(BOOL propVal)
{
	SetProperty(0xff, VT_BOOL, propVal);
}
BOOL GetAutoScaleData()
{
	BOOL result;
	GetProperty(0x100, VT_BOOL, (void*)&result);
	return result;
}
void SetAutoScaleData(BOOL propVal)
{
	SetProperty(0x100, VT_BOOL, propVal);
}
long GetArrowCursor()
{
	long result;
	GetProperty(0x102, VT_I4, (void*)&result);
	return result;
}
void SetArrowCursor(long propVal)
{
	SetProperty(0x102, VT_I4, propVal);
}
long GetHandCursor()
{
	long result;
	GetProperty(0x103, VT_I4, (void*)&result);
	return result;
}
void SetHandCursor(long propVal)
{
	SetProperty(0x103, VT_I4, propVal);
}
long GetZoomCursor()
{
	long result;
	GetProperty(0x104, VT_I4, (void*)&result);
	return result;
}
void SetZoomCursor(long propVal)
{
	SetProperty(0x104, VT_I4, propVal);
}
long GetNoDropCursor()
{
	long result;
	GetProperty(0x105, VT_I4, (void*)&result);
	return result;
}
void SetNoDropCursor(long propVal)
{
	SetProperty(0x105, VT_I4, propVal);
}
BOOL GetCustom()
{
	BOOL result;
	GetProperty(0x107, VT_BOOL, (void*)&result);
	return result;
}
void SetCustom(BOOL propVal)
{
	SetProperty(0x107, VT_BOOL, propVal);
}
BOOL GetCacheBmp()
{
	BOOL result;
	GetProperty(0x108, VT_BOOL, (void*)&result);
	return result;
}
void SetCacheBmp(BOOL propVal)
{
	SetProperty(0x108, VT_BOOL, propVal);
}
BOOL GetPainting()
{
	BOOL result;
	GetProperty(0x109, VT_BOOL, (void*)&result);
	return result;
}
void SetPainting(BOOL propVal)
{
	SetProperty(0x109, VT_BOOL, propVal);
}
BOOL GetNoCustomParms()
{
	BOOL result;
	GetProperty(0x10a, VT_BOOL, (void*)&result);
	return result;
}
void SetNoCustomParms(BOOL propVal)
{
	SetProperty(0x10a, VT_BOOL, propVal);
}
BOOL GetNoHelp()
{
	BOOL result;
	GetProperty(0x10b, VT_BOOL, (void*)&result);
	return result;
}
void SetNoHelp(BOOL propVal)
{
	SetProperty(0x10b, VT_BOOL, propVal);
}
BOOL GetAllowTitleHotSpots()
{
	BOOL result;
	GetProperty(0x10c, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowTitleHotSpots(BOOL propVal)
{
	SetProperty(0x10c, VT_BOOL, propVal);
}
BOOL GetAllowSubTitleHotSpots()
{
	BOOL result;
	GetProperty(0x10d, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowSubTitleHotSpots(BOOL propVal)
{
	SetProperty(0x10d, VT_BOOL, propVal);
}
BOOL GetAllowBottomTitleHotSpots()
{
	BOOL result;
	GetProperty(0x10e, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowBottomTitleHotSpots(BOOL propVal)
{
	SetProperty(0x10e, VT_BOOL, propVal);
}
BOOL GetAllowJpegOutput()
{
	BOOL result;
	GetProperty(0x10f, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowJpegOutput(BOOL propVal)
{
	SetProperty(0x10f, VT_BOOL, propVal);
}
CString GetHelpFileName()
{
	CString result;
	GetProperty(0x110, VT_BSTR, (void*)&result);
	return result;
}
void SetHelpFileName(CString propVal)
{
	SetProperty(0x110, VT_BSTR, propVal);
}
long GetDataHotSpotLimit()
{
	long result;
	GetProperty(0x111, VT_I4, (void*)&result);
	return result;
}
void SetDataHotSpotLimit(long propVal)
{
	SetProperty(0x111, VT_I4, propVal);
}
long GetHourGlassThreshold()
{
	long result;
	GetProperty(0x112, VT_I4, (void*)&result);
	return result;
}
void SetHourGlassThreshold(long propVal)
{
	SetProperty(0x112, VT_I4, propVal);
}
BOOL GetNoHiddenLinesInArea()
{
	BOOL result;
	GetProperty(0x113, VT_BOOL, (void*)&result);
	return result;
}
void SetNoHiddenLinesInArea(BOOL propVal)
{
	SetProperty(0x113, VT_BOOL, propVal);
}
BOOL GetSpecificPlotModeColor()
{
	BOOL result;
	GetProperty(0x114, VT_BOOL, (void*)&result);
	return result;
}
void SetSpecificPlotModeColor(BOOL propVal)
{
	SetProperty(0x114, VT_BOOL, propVal);
}
int GetLogicalLimit()
{
	int result;
	GetProperty(0x115, VT_I4, (void*)&result);
	return result;
}
void SetLogicalLimit(int propVal)
{
	SetProperty(0x115, VT_I4, propVal);
}
BOOL GetNullDataGaps()
{
	BOOL result;
	GetProperty(0x116, VT_BOOL, (void*)&result);
	return result;
}
void SetNullDataGaps(BOOL propVal)
{
	SetProperty(0x116, VT_BOOL, propVal);
}
BOOL GetAllowStep()
{
	BOOL result;
	GetProperty(0x117, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowStep(BOOL propVal)
{
	SetProperty(0x117, VT_BOOL, propVal);
}
BOOL GetScrollingVertZoom()
{
	BOOL result;
	GetProperty(0x118, VT_BOOL, (void*)&result);
	return result;
}
void SetScrollingVertZoom(BOOL propVal)
{
	SetProperty(0x118, VT_BOOL, propVal);
}
CString GetAxisFormatY()
{
	CString result;
	GetProperty(0x119, VT_BSTR, (void*)&result);
	return result;
}
void SetAxisFormatY(CString propVal)
{
	SetProperty(0x119, VT_BSTR, propVal);
}
CString GetAxisFormatRY()
{
	CString result;
	GetProperty(0x11a, VT_BSTR, (void*)&result);
	return result;
}
void SetAxisFormatRY(CString propVal)
{
	SetProperty(0x11a, VT_BSTR, propVal);
}
double GetZoomMinRY()
{
	double result;
	GetProperty(0x11b, VT_R8, (void*)&result);
	return result;
}
void SetZoomMinRY(double propVal)
{
	SetProperty(0x11b, VT_R8, propVal);
}
double GetZoomMaxRY()
{
	double result;
	GetProperty(0x11c, VT_R8, (void*)&result);
	return result;
}
void SetZoomMaxRY(double propVal)
{
	SetProperty(0x11c, VT_R8, propVal);
}
short GetThreeDThreshold()
{
	short result;
	GetProperty(0x11d, VT_I2, (void*)&result);
	return result;
}
void SetThreeDThreshold(short propVal)
{
	SetProperty(0x11d, VT_I2, propVal);
}
long GetHotSpotSize()
{
	long result;
	GetProperty(0x11e, VT_I4, (void*)&result);
	return result;
}
void SetHotSpotSize(long propVal)
{
	SetProperty(0x11e, VT_I4, propVal);
}
BOOL GetAllowAxisLabelHotSpots()
{
	BOOL result;
	GetProperty(0x11f, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowAxisLabelHotSpots(BOOL propVal)
{
	SetProperty(0x11f, VT_BOOL, propVal);
}
BOOL GetAllowAxisHotSpots()
{
	BOOL result;
	GetProperty(0x120, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowAxisHotSpots(BOOL propVal)
{
	SetProperty(0x120, VT_BOOL, propVal);
}
BOOL GetBestFitFix()
{
	BOOL result;
	GetProperty(0x121, VT_BOOL, (void*)&result);
	return result;
}
void SetBestFitFix(BOOL propVal)
{
	SetProperty(0x121, VT_BOOL, propVal);
}
unsigned long GetBoxPlotColor()
{
	unsigned long result;
	GetProperty(0x122, VT_UI4, (void*)&result);
	return result;
}
void SetBoxPlotColor(unsigned long propVal)
{
	SetProperty(0x122, VT_UI4, propVal);
}
BOOL GetAllowRibbon()
{
	BOOL result;
	GetProperty(0x123, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowRibbon(BOOL propVal)
{
	SetProperty(0x123, VT_BOOL, propVal);
}
long GetSpecialScalingY()
{
	long result;
	GetProperty(0x124, VT_I4, (void*)&result);
	return result;
}
void SetSpecialScalingY(long propVal)
{
	SetProperty(0x124, VT_I4, propVal);
}
long GetSpecialScalingRY()
{
	long result;
	GetProperty(0x125, VT_I4, (void*)&result);
	return result;
}
void SetSpecialScalingRY(long propVal)
{
	SetProperty(0x125, VT_I4, propVal);
}
short GetLogTickThreshold()
{
	short result;
	GetProperty(0x126, VT_I2, (void*)&result);
	return result;
}
void SetLogTickThreshold(short propVal)
{
	SetProperty(0x126, VT_I2, propVal);
}
short GetAutoMinMaxPadding()
{
	short result;
	GetProperty(0x12a, VT_I2, (void*)&result);
	return result;
}
void SetAutoMinMaxPadding(short propVal)
{
	SetProperty(0x12a, VT_I2, propVal);
}
long GetLegendLocation()
{
	long result;
	GetProperty(0x12b, VT_I4, (void*)&result);
	return result;
}
void SetLegendLocation(long propVal)
{
	SetProperty(0x12b, VT_I4, propVal);
}
BOOL GetNoGridLineMultiples()
{
	BOOL result;
	GetProperty(0x12c, VT_BOOL, (void*)&result);
	return result;
}
void SetNoGridLineMultiples(BOOL propVal)
{
	SetProperty(0x12c, VT_BOOL, propVal);
}
double GetStartTime()
{
	double result;
	GetProperty(0x12d, VT_R8, (void*)&result);
	return result;
}
void SetStartTime(double propVal)
{
	SetProperty(0x12d, VT_R8, propVal);
}
double GetEndTime()
{
	double result;
	GetProperty(0x12e, VT_R8, (void*)&result);
	return result;
}
void SetEndTime(double propVal)
{
	SetProperty(0x12e, VT_R8, propVal);
}
CString GetAxisFormatX()
{
	CString result;
	GetProperty(0x12f, VT_BSTR, (void*)&result);
	return result;
}
void SetAxisFormatX(CString propVal)
{
	SetProperty(0x12f, VT_BSTR, propVal);
}
CString GetAxisFormatTX()
{
	CString result;
	GetProperty(0x130, VT_BSTR, (void*)&result);
	return result;
}
void SetAxisFormatTX(CString propVal)
{
	SetProperty(0x130, VT_BSTR, propVal);
}
BOOL GetAllowContourLines()
{
	BOOL result;
	GetProperty(0x131, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowContourLines(BOOL propVal)
{
	SetProperty(0x131, VT_BOOL, propVal);
}
BOOL GetAllowContourColors()
{
	BOOL result;
	GetProperty(0x132, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowContourColors(BOOL propVal)
{
	SetProperty(0x132, VT_BOOL, propVal);
}
double GetManualMinZ()
{
	double result;
	GetProperty(0x133, VT_R8, (void*)&result);
	return result;
}
void SetManualMinZ(double propVal)
{
	SetProperty(0x133, VT_R8, propVal);
}
double GetManualMaxZ()
{
	double result;
	GetProperty(0x134, VT_R8, (void*)&result);
	return result;
}
void SetManualMaxZ(double propVal)
{
	SetProperty(0x134, VT_R8, propVal);
}
long GetManualScaleControlZ()
{
	long result;
	GetProperty(0x135, VT_I4, (void*)&result);
	return result;
}
void SetManualScaleControlZ(long propVal)
{
	SetProperty(0x135, VT_I4, propVal);
}
double GetManualZAxisLine()
{
	double result;
	GetProperty(0x136, VT_R8, (void*)&result);
	return result;
}
void SetManualZAxisLine(double propVal)
{
	SetProperty(0x136, VT_R8, propVal);
}
short GetContourLineLabelDensity()
{
	short result;
	GetProperty(0x137, VT_I2, (void*)&result);
	return result;
}
void SetContourLineLabelDensity(short propVal)
{
	SetProperty(0x137, VT_I2, propVal);
}
BOOL GetSpecialDateTimeMode()
{
	BOOL result;
	GetProperty(0x138, VT_BOOL, (void*)&result);
	return result;
}
void SetSpecialDateTimeMode(BOOL propVal)
{
	SetProperty(0x138, VT_BOOL, propVal);
}
BOOL GetAllowPage1()
{
	BOOL result;
	GetProperty(0x13d, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowPage1(BOOL propVal)
{
	SetProperty(0x13d, VT_BOOL, propVal);
}
BOOL GetAllowPage2()
{
	BOOL result;
	GetProperty(0x13e, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowPage2(BOOL propVal)
{
	SetProperty(0x13e, VT_BOOL, propVal);
}
BOOL GetAllowSubsetsPage()
{
	BOOL result;
	GetProperty(0x13f, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowSubsetsPage(BOOL propVal)
{
	SetProperty(0x13f, VT_BOOL, propVal);
}
BOOL GetAllowFontPage()
{
	BOOL result;
	GetProperty(0x140, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowFontPage(BOOL propVal)
{
	SetProperty(0x140, VT_BOOL, propVal);
}
BOOL GetAllowColorPage()
{
	BOOL result;
	GetProperty(0x141, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowColorPage(BOOL propVal)
{
	SetProperty(0x141, VT_BOOL, propVal);
}
BOOL GetAllowStylePage()
{
	BOOL result;
	GetProperty(0x142, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowStylePage(BOOL propVal)
{
	SetProperty(0x142, VT_BOOL, propVal);
}
BOOL GetAllowAxisPage()
{
	BOOL result;
	GetProperty(0x143, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowAxisPage(BOOL propVal)
{
	SetProperty(0x143, VT_BOOL, propVal);
}
short GetMaxDataPrecision()
{
	short result;
	GetProperty(0x144, VT_I2, (void*)&result);
	return result;
}
void SetMaxDataPrecision(short propVal)
{
	SetProperty(0x144, VT_I2, propVal);
}
long GetMinimumPointSize()
{
	long result;
	GetProperty(0x145, VT_I4, (void*)&result);
	return result;
}
void SetMinimumPointSize(long propVal)
{
	SetProperty(0x145, VT_I4, propVal);
}
long GetImageAdjustLeft()
{
	long result;
	GetProperty(0x14b, VT_I4, (void*)&result);
	return result;
}
void SetImageAdjustLeft(long propVal)
{
	SetProperty(0x14b, VT_I4, propVal);
}
long GetImageAdjustRight()
{
	long result;
	GetProperty(0x14c, VT_I4, (void*)&result);
	return result;
}
void SetImageAdjustRight(long propVal)
{
	SetProperty(0x14c, VT_I4, propVal);
}
long GetImageAdjustTop()
{
	long result;
	GetProperty(0x14d, VT_I4, (void*)&result);
	return result;
}
void SetImageAdjustTop(long propVal)
{
	SetProperty(0x14d, VT_I4, propVal);
}
long GetImageAdjustBottom()
{
	long result;
	GetProperty(0x14e, VT_I4, (void*)&result);
	return result;
}
void SetImageAdjustBottom(long propVal)
{
	SetProperty(0x14e, VT_I4, propVal);
}
BOOL GetModalDialogs()
{
	BOOL result;
	GetProperty(0x14f, VT_BOOL, (void*)&result);
	return result;
}
void SetModalDialogs(BOOL propVal)
{
	SetProperty(0x14f, VT_BOOL, propVal);
}
BOOL GetModelessOnTop()
{
	BOOL result;
	GetProperty(0x150, VT_BOOL, (void*)&result);
	return result;
}
void SetModelessOnTop(BOOL propVal)
{
	SetProperty(0x150, VT_BOOL, propVal);
}
BOOL GetModelessAutoClose()
{
	BOOL result;
	GetProperty(0x151, VT_BOOL, (void*)&result);
	return result;
}
void SetModelessAutoClose(BOOL propVal)
{
	SetProperty(0x151, VT_BOOL, propVal);
}
long GetDialogResult()
{
	long result;
	GetProperty(0x152, VT_I4, (void*)&result);
	return result;
}
void SetDialogResult(long propVal)
{
	SetProperty(0x152, VT_I4, propVal);
}
BOOL GetCustomGridNumbersY()
{
	BOOL result;
	GetProperty(0x153, VT_BOOL, (void*)&result);
	return result;
}
void SetCustomGridNumbersY(BOOL propVal)
{
	SetProperty(0x153, VT_BOOL, propVal);
}
BOOL GetCustomGridNumbersRY()
{
	BOOL result;
	GetProperty(0x154, VT_BOOL, (void*)&result);
	return result;
}
void SetCustomGridNumbersRY(BOOL propVal)
{
	SetProperty(0x154, VT_BOOL, propVal);
}
BOOL GetCustomGridNumbersX()
{
	BOOL result;
	GetProperty(0x155, VT_BOOL, (void*)&result);
	return result;
}
void SetCustomGridNumbersX(BOOL propVal)
{
	SetProperty(0x155, VT_BOOL, propVal);
}
BOOL GetCustomGridNumbersTX()
{
	BOOL result;
	GetProperty(0x156, VT_BOOL, (void*)&result);
	return result;
}
void SetCustomGridNumbersTX(BOOL propVal)
{
	SetProperty(0x156, VT_BOOL, propVal);
}
long GetTickStyle()
{
	long result;
	GetProperty(0x157, VT_I4, (void*)&result);
	return result;
}
void SetTickStyle(long propVal)
{
	SetProperty(0x157, VT_I4, propVal);
}
unsigned long GetTickColor()
{
	unsigned long result;
	GetProperty(0x158, VT_UI4, (void*)&result);
	return result;
}
void SetTickColor(unsigned long propVal)
{
	SetProperty(0x158, VT_UI4, propVal);
}
long GetZoomStyle()
{
	long result;
	GetProperty(0x159, VT_I4, (void*)&result);
	return result;
}
void SetZoomStyle(long propVal)
{
	SetProperty(0x159, VT_I4, propVal);
}
short GetMultiAxisSeparatorSize()
{
	short result;
	GetProperty(0x15a, VT_I2, (void*)&result);
	return result;
}
void SetMultiAxisSeparatorSize(short propVal)
{
	SetProperty(0x15a, VT_I2, propVal);
}
long GetCursorPromptLocation()
{
	long result;
	GetProperty(0x15b, VT_I4, (void*)&result);
	return result;
}
void SetCursorPromptLocation(long propVal)
{
	SetProperty(0x15b, VT_I4, propVal);
}
long GetLegendStyle()
{
	long result;
	GetProperty(0x15c, VT_I4, (void*)&result);
	return result;
}
void SetLegendStyle(long propVal)
{
	SetProperty(0x15c, VT_I4, propVal);
}
long GetMultiAxisStyle()
{
	long result;
	GetProperty(0x15d, VT_I4, (void*)&result);
	return result;
}
void SetMultiAxisStyle(long propVal)
{
	SetProperty(0x15d, VT_I4, propVal);
}
BOOL GetFloatingBars()
{
	BOOL result;
	GetProperty(0x15e, VT_BOOL, (void*)&result);
	return result;
}
void SetFloatingBars(BOOL propVal)
{
	SetProperty(0x15e, VT_BOOL, propVal);
}
BOOL GetSimpleLineLegend()
{
	BOOL result;
	GetProperty(0x15f, VT_BOOL, (void*)&result);
	return result;
}
void SetSimpleLineLegend(BOOL propVal)
{
	SetProperty(0x15f, VT_BOOL, propVal);
}
BOOL GetSimplePointLegend()
{
	BOOL result;
	GetProperty(0x160, VT_BOOL, (void*)&result);
	return result;
}
void SetSimplePointLegend(BOOL propVal)
{
	SetProperty(0x160, VT_BOOL, propVal);
}
BOOL GetDisableSortPlotMethods()
{
	BOOL result;
	GetProperty(0x161, VT_BOOL, (void*)&result);
	return result;
}
void SetDisableSortPlotMethods(BOOL propVal)
{
	SetProperty(0x161, VT_BOOL, propVal);
}
short GetWorkingTable()
{
	short result;
	GetProperty(0x162, VT_I2, (void*)&result);
	return result;
}
void SetWorkingTable(short propVal)
{
	SetProperty(0x162, VT_I2, propVal);
}
short GetTARows()
{
	short result;
	GetProperty(0x163, VT_I2, (void*)&result);
	return result;
}
void SetTARows(short propVal)
{
	SetProperty(0x163, VT_I2, propVal);
}
short GetTAColumns()
{
	short result;
	GetProperty(0x164, VT_I2, (void*)&result);
	return result;
}
void SetTAColumns(short propVal)
{
	SetProperty(0x164, VT_I2, propVal);
}
short GetTAHeaderRows()
{
	short result;
	GetProperty(0x165, VT_I2, (void*)&result);
	return result;
}
void SetTAHeaderRows(short propVal)
{
	SetProperty(0x165, VT_I2, propVal);
}
BOOL GetTAHeaderColumn()
{
	BOOL result;
	GetProperty(0x166, VT_BOOL, (void*)&result);
	return result;
}
void SetTAHeaderColumn(BOOL propVal)
{
	SetProperty(0x166, VT_BOOL, propVal);
}
long GetTAHeaderOrientation()
{
	long result;
	GetProperty(0x167, VT_I4, (void*)&result);
	return result;
}
void SetTAHeaderOrientation(long propVal)
{
	SetProperty(0x167, VT_I4, propVal);
}
long GetTALocation()
{
	long result;
	GetProperty(0x168, VT_I4, (void*)&result);
	return result;
}
void SetTALocation(long propVal)
{
	SetProperty(0x168, VT_I4, propVal);
}
long GetTABorder()
{
	long result;
	GetProperty(0x169, VT_I4, (void*)&result);
	return result;
}
void SetTABorder(long propVal)
{
	SetProperty(0x169, VT_I4, propVal);
}
unsigned long GetTABackColor()
{
	unsigned long result;
	GetProperty(0x16a, VT_UI4, (void*)&result);
	return result;
}
void SetTABackColor(unsigned long propVal)
{
	SetProperty(0x16a, VT_UI4, propVal);
}
unsigned long GetTAForeColor()
{
	unsigned long result;
	GetProperty(0x16b, VT_UI4, (void*)&result);
	return result;
}
void SetTAForeColor(unsigned long propVal)
{
	SetProperty(0x16b, VT_UI4, propVal);
}
short GetTATextSize()
{
	short result;
	GetProperty(0x16c, VT_I2, (void*)&result);
	return result;
}
void SetTATextSize(short propVal)
{
	SetProperty(0x16c, VT_I2, propVal);
}
long GetTAAxisLocation()
{
	long result;
	GetProperty(0x16d, VT_I4, (void*)&result);
	return result;
}
void SetTAAxisLocation(long propVal)
{
	SetProperty(0x16d, VT_I4, propVal);
}
BOOL GetShowTableAnnotation()
{
	BOOL result;
	GetProperty(0x16e, VT_BOOL, (void*)&result);
	return result;
}
void SetShowTableAnnotation(BOOL propVal)
{
	SetProperty(0x16e, VT_BOOL, propVal);
}
short GetDelimiter()
{
	short result;
	GetProperty(0x16f, VT_I2, (void*)&result);
	return result;
}
void SetDelimiter(short propVal)
{
	SetProperty(0x16f, VT_I2, propVal);
}
BOOL GetDisableSymbolFix()
{
	BOOL result;
	GetProperty(0x170, VT_BOOL, (void*)&result);
	return result;
}
void SetDisableSymbolFix(BOOL propVal)
{
	SetProperty(0x170, VT_BOOL, propVal);
}
short GetAxisSizeY()
{
	short result;
	GetProperty(0x171, VT_I2, (void*)&result);
	return result;
}
void SetAxisSizeY(short propVal)
{
	SetProperty(0x171, VT_I2, propVal);
}
short GetAxisLocationY()
{
	short result;
	GetProperty(0x172, VT_I2, (void*)&result);
	return result;
}
void SetAxisLocationY(short propVal)
{
	SetProperty(0x172, VT_I2, propVal);
}
short GetAxisSizeRY()
{
	short result;
	GetProperty(0x173, VT_I2, (void*)&result);
	return result;
}
void SetAxisSizeRY(short propVal)
{
	SetProperty(0x173, VT_I2, propVal);
}
short GetAxisLocationRY()
{
	short result;
	GetProperty(0x174, VT_I2, (void*)&result);
	return result;
}
void SetAxisLocationRY(short propVal)
{
	SetProperty(0x174, VT_I2, propVal);
}
BOOL GetFixedLineThickness()
{
	BOOL result;
	GetProperty(0x175, VT_BOOL, (void*)&result);
	return result;
}
void SetFixedLineThickness(BOOL propVal)
{
	SetProperty(0x175, VT_BOOL, propVal);
}
BOOL GetFixedSPMWidth()
{
	BOOL result;
	GetProperty(0x176, VT_BOOL, (void*)&result);
	return result;
}
void SetFixedSPMWidth(BOOL propVal)
{
	SetProperty(0x176, VT_BOOL, propVal);
}
long GetYearMonthDayPrompt()
{
	long result;
	GetProperty(0x177, VT_I4, (void*)&result);
	return result;
}
void SetYearMonthDayPrompt(long propVal)
{
	SetProperty(0x177, VT_I4, propVal);
}
long GetTimeLabelType()
{
	long result;
	GetProperty(0x178, VT_I4, (void*)&result);
	return result;
}
void SetTimeLabelType(long propVal)
{
	SetProperty(0x178, VT_I4, propVal);
}
long GetDayLabelType()
{
	long result;
	GetProperty(0x179, VT_I4, (void*)&result);
	return result;
}
void SetDayLabelType(long propVal)
{
	SetProperty(0x179, VT_I4, propVal);
}
long GetMonthLabelType()
{
	long result;
	GetProperty(0x17a, VT_I4, (void*)&result);
	return result;
}
void SetMonthLabelType(long propVal)
{
	SetProperty(0x17a, VT_I4, propVal);
}
long GetYearLabelType()
{
	long result;
	GetProperty(0x17b, VT_I4, (void*)&result);
	return result;
}
void SetYearLabelType(long propVal)
{
	SetProperty(0x17b, VT_I4, propVal);
}
BOOL GetDisableClipping()
{
	BOOL result;
	GetProperty(0x17c, VT_BOOL, (void*)&result);
	return result;
}
void SetDisableClipping(BOOL propVal)
{
	SetProperty(0x17c, VT_BOOL, propVal);
}
long GetBorderTypes()
{
	long result;
	GetProperty(0x17d, VT_I4, (void*)&result);
	return result;
}
void SetBorderTypes(long propVal)
{
	SetProperty(0x17d, VT_I4, propVal);
}
BOOL GetDateTimeShowSeconds()
{
	BOOL result;
	GetProperty(0x17e, VT_BOOL, (void*)&result);
	return result;
}
void SetDateTimeShowSeconds(BOOL propVal)
{
	SetProperty(0x17e, VT_BOOL, propVal);
}
BOOL GetTriangleAnnotationAdj()
{
	BOOL result;
	GetProperty(0x17f, VT_BOOL, (void*)&result);
	return result;
}
void SetTriangleAnnotationAdj(BOOL propVal)
{
	SetProperty(0x17f, VT_BOOL, propVal);
}
BOOL GetVGNAxisLabelLocation()
{
	BOOL result;
	GetProperty(0x180, VT_BOOL, (void*)&result);
	return result;
}
void SetVGNAxisLabelLocation(BOOL propVal)
{
	SetProperty(0x180, VT_BOOL, propVal);
}
BOOL GetAllowGridNumberHotSpotsY()
{
	BOOL result;
	GetProperty(0x181, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowGridNumberHotSpotsY(BOOL propVal)
{
	SetProperty(0x181, VT_BOOL, propVal);
}
BOOL GetAllowGridNumberHotSpotsX()
{
	BOOL result;
	GetProperty(0x182, VT_BOOL, (void*)&result);
	return result;
}
void SetAllowGridNumberHotSpotsX(BOOL propVal)
{
	SetProperty(0x182, VT_BOOL, propVal);
}
unsigned long GetBarBorderColor()
{
	unsigned long result;
	GetProperty(0x183, VT_UI4, (void*)&result);
	return result;
}
void SetBarBorderColor(unsigned long propVal)
{
	SetProperty(0x183, VT_UI4, propVal);
}
unsigned long GetHatchBackColor()
{
	unsigned long result;
	GetProperty(0x184, VT_UI4, (void*)&result);
	return result;
}
void SetHatchBackColor(unsigned long propVal)
{
	SetProperty(0x184, VT_UI4, propVal);
}
BOOL GetYAxisVertGridNumbers()
{
	BOOL result;
	GetProperty(0x185, VT_BOOL, (void*)&result);
	return result;
}
void SetYAxisVertGridNumbers(BOOL propVal)
{
	SetProperty(0x185, VT_BOOL, propVal);
}
BOOL GetDayLightSavings()
{
	BOOL result;
	GetProperty(0x186, VT_BOOL, (void*)&result);
	return result;
}
void SetDayLightSavings(BOOL propVal)
{
	SetProperty(0x186, VT_BOOL, propVal);
}
BOOL GetFixedFonts()
{
	BOOL result;
	GetProperty(0x187, VT_BOOL, (void*)&result);
	return result;
}
void SetFixedFonts(BOOL propVal)
{
	SetProperty(0x187, VT_BOOL, propVal);
}
long GetSizeNSCursor()
{
	long result;
	GetProperty(0x188, VT_I4, (void*)&result);
	return result;
}
void SetSizeNSCursor(long propVal)
{
	SetProperty(0x188, VT_I4, propVal);
}
BOOL GetContourStyleLegend()
{
	BOOL result;
	GetProperty(0x189, VT_BOOL, (void*)&result);
	return result;
}
void SetContourStyleLegend(BOOL propVal)
{
	SetProperty(0x189, VT_BOOL, propVal);
}
short GetSpeedBoost()
{
	short result;
	GetProperty(0x18a, VT_I2, (void*)&result);
	return result;
}
void SetSpeedBoost(short propVal)
{
	SetProperty(0x18a, VT_I2, propVal);
}
long GetShowTickMarkY()
{
	long result;
	GetProperty(0x18b, VT_I4, (void*)&result);
	return result;
}
void SetShowTickMarkY(long propVal)
{
	SetProperty(0x18b, VT_I4, propVal);
}
long GetShowTickMarkRY()
{
	long result;
	GetProperty(0x18c, VT_I4, (void*)&result);
	return result;
}
void SetShowTickMarkRY(long propVal)
{
	SetProperty(0x18c, VT_I4, propVal);
}
long GetShowTickMarkX()
{
	long result;
	GetProperty(0x18d, VT_I4, (void*)&result);
	return result;
}
void SetShowTickMarkX(long propVal)
{
	SetProperty(0x18d, VT_I4, propVal);
}
long GetShowTickMarkTX()
{
	long result;
	GetProperty(0x18e, VT_I4, (void*)&result);
	return result;
}
void SetShowTickMarkTX(long propVal)
{
	SetProperty(0x18e, VT_I4, propVal);
}
short GetOHLCMinWidth()
{
	short result;
	GetProperty(0x18f, VT_I2, (void*)&result);
	return result;
}
void SetOHLCMinWidth(short propVal)
{
	SetProperty(0x18f, VT_I2, propVal);
}
BOOL GetMultiAxesSizing()
{
	BOOL result;
	GetProperty(0x190, VT_BOOL, (void*)&result);
	return result;
}
void SetMultiAxesSizing(BOOL propVal)
{
	SetProperty(0x190, VT_BOOL, propVal);
}
CString GetTAFont()
{
	CString result;
	GetProperty(0x191, VT_BSTR, (void*)&result);
	return result;
}
void SetTAFont(CString propVal)
{
	SetProperty(0x191, VT_BSTR, propVal);
}
float GetFontSizeMSCntl()
{
	float result;
	GetProperty(0x192, VT_R4, (void*)&result);
	return result;
}
void SetFontSizeMSCntl(float propVal)
{
	SetProperty(0x192, VT_R4, propVal);
}
float GetFontSizeMBCntl()
{
	float result;
	GetProperty(0x193, VT_R4, (void*)&result);
	return result;
}
void SetFontSizeMBCntl(float propVal)
{
	SetProperty(0x193, VT_R4, propVal);
}
float GetFontSizeGNCntl()
{
	float result;
	GetProperty(0x194, VT_R4, (void*)&result);
	return result;
}
void SetFontSizeGNCntl(float propVal)
{
	SetProperty(0x194, VT_R4, propVal);
}
float GetFontSizeCPCntl()
{
	float result;
	GetProperty(0x195, VT_R4, (void*)&result);
	return result;
}
void SetFontSizeCPCntl(float propVal)
{
	SetProperty(0x195, VT_R4, propVal);
}
float GetFontSizeALCntl()
{
	float result;
	GetProperty(0x196, VT_R4, (void*)&result);
	return result;
}
void SetFontSizeALCntl(float propVal)
{
	SetProperty(0x196, VT_R4, propVal);
}
float GetDashLineThickness()
{
	float result;
	GetProperty(0x197, VT_R4, (void*)&result);
	return result;
}
void SetDashLineThickness(float propVal)
{
	SetProperty(0x197, VT_R4, propVal);
}
float GetGridAspect()
{
	float result;
	GetProperty(0x198, VT_R4, (void*)&result);
	return result;
}
void SetGridAspect(float propVal)
{
	SetProperty(0x198, VT_R4, propVal);
}
double GetLeftEdgeSpacing()
{
	double result;
	GetProperty(0x199, VT_R8, (void*)&result);
	return result;
}
void SetLeftEdgeSpacing(double propVal)
{
	SetProperty(0x199, VT_R8, propVal);
}
double GetRightEdgeSpacing()
{
	double result;
	GetProperty(0x19a, VT_R8, (void*)&result);
	return result;
}
void SetRightEdgeSpacing(double propVal)
{
	SetProperty(0x19a, VT_R8, propVal);
}
double GetAxisNumberSpacing()
{
	double result;
	GetProperty(0x19b, VT_R8, (void*)&result);
	return result;
}
void SetAxisNumberSpacing(double propVal)
{
	SetProperty(0x19b, VT_R8, propVal);
}
long GetViewingStyleMenu()
{
	long result;
	GetProperty(0x19c, VT_I4, (void*)&result);
	return result;
}
void SetViewingStyleMenu(long propVal)
{
	SetProperty(0x19c, VT_I4, propVal);
}
long GetFontSizeMenu()
{
	long result;
	GetProperty(0x19d, VT_I4, (void*)&result);
	return result;
}
void SetFontSizeMenu(long propVal)
{
	SetProperty(0x19d, VT_I4, propVal);
}
long GetDataPrecisionMenu()
{
	long result;
	GetProperty(0x19e, VT_I4, (void*)&result);
	return result;
}
void SetDataPrecisionMenu(long propVal)
{
	SetProperty(0x19e, VT_I4, propVal);
}
long GetDataShadowMenu()
{
	long result;
	GetProperty(0x19f, VT_I4, (void*)&result);
	return result;
}
void SetDataShadowMenu(long propVal)
{
	SetProperty(0x19f, VT_I4, propVal);
}
BOOL GetSeparatorMenu()
{
	BOOL result;
	GetProperty(0x1a0, VT_BOOL, (void*)&result);
	return result;
}
void SetSeparatorMenu(BOOL propVal)
{
	SetProperty(0x1a0, VT_BOOL, propVal);
}
long GetMaximizeMenu()
{
	long result;
	GetProperty(0x1a1, VT_I4, (void*)&result);
	return result;
}
void SetMaximizeMenu(long propVal)
{
	SetProperty(0x1a1, VT_I4, propVal);
}
long GetCustomizeDialogMenu()
{
	long result;
	GetProperty(0x1a2, VT_I4, (void*)&result);
	return result;
}
void SetCustomizeDialogMenu(long propVal)
{
	SetProperty(0x1a2, VT_I4, propVal);
}
long GetExportDialogMenu()
{
	long result;
	GetProperty(0x1a3, VT_I4, (void*)&result);
	return result;
}
void SetExportDialogMenu(long propVal)
{
	SetProperty(0x1a3, VT_I4, propVal);
}
long GetHelpMenu()
{
	long result;
	GetProperty(0x1a4, VT_I4, (void*)&result);
	return result;
}
void SetHelpMenu(long propVal)
{
	SetProperty(0x1a4, VT_I4, propVal);
}
long GetBorderTypeMenu()
{
	long result;
	GetProperty(0x1a5, VT_I4, (void*)&result);
	return result;
}
void SetBorderTypeMenu(long propVal)
{
	SetProperty(0x1a5, VT_I4, propVal);
}
long GetShowLegendMenu()
{
	long result;
	GetProperty(0x1a6, VT_I4, (void*)&result);
	return result;
}
void SetShowLegendMenu(long propVal)
{
	SetProperty(0x1a6, VT_I4, propVal);
}
long GetLegendLocationMenu()
{
	long result;
	GetProperty(0x1a7, VT_I4, (void*)&result);
	return result;
}
void SetLegendLocationMenu(long propVal)
{
	SetProperty(0x1a7, VT_I4, propVal);
}
long GetShowTableAnnotationsMenu()
{
	long result;
	GetProperty(0x1a8, VT_I4, (void*)&result);
	return result;
}
void SetShowTableAnnotationsMenu(long propVal)
{
	SetProperty(0x1a8, VT_I4, propVal);
}
long GetMultiAxisStyleMenu()
{
	long result;
	GetProperty(0x1a9, VT_I4, (void*)&result);
	return result;
}
void SetMultiAxisStyleMenu(long propVal)
{
	SetProperty(0x1a9, VT_I4, propVal);
}
long GetFixedFontMenu()
{
	long result;
	GetProperty(0x1aa, VT_I4, (void*)&result);
	return result;
}
void SetFixedFontMenu(long propVal)
{
	SetProperty(0x1aa, VT_I4, propVal);
}
BOOL GetShowAllTableAnnotations()
{
	BOOL result;
	GetProperty(0x1ab, VT_BOOL, (void*)&result);
	return result;
}
void SetShowAllTableAnnotations(BOOL propVal)
{
	SetProperty(0x1ab, VT_BOOL, propVal);
}
BOOL GetShowLegend()
{
	BOOL result;
	GetProperty(0x1ac, VT_BOOL, (void*)&result);
	return result;
}
void SetShowLegend(BOOL propVal)
{
	SetProperty(0x1ac, VT_BOOL, propVal);
}
long GetGridLineMenu()
{
	long result;
	GetProperty(0x1ad, VT_I4, (void*)&result);
	return result;
}
void SetGridLineMenu(long propVal)
{
	SetProperty(0x1ad, VT_I4, propVal);
}
long GetPlotMethodMenu()
{
	long result;
	GetProperty(0x1ae, VT_I4, (void*)&result);
	return result;
}
void SetPlotMethodMenu(long propVal)
{
	SetProperty(0x1ae, VT_I4, propVal);
}
long GetGridInFrontMenu()
{
	long result;
	GetProperty(0x1af, VT_I4, (void*)&result);
	return result;
}
void SetGridInFrontMenu(long propVal)
{
	SetProperty(0x1af, VT_I4, propVal);
}
long GetTreatComparisonsMenu()
{
	long result;
	GetProperty(0x1b0, VT_I4, (void*)&result);
	return result;
}
void SetTreatComparisonsMenu(long propVal)
{
	SetProperty(0x1b0, VT_I4, propVal);
}
long GetMarkDataPointsMenu()
{
	long result;
	GetProperty(0x1b1, VT_I4, (void*)&result);
	return result;
}
void SetMarkDataPointsMenu(long propVal)
{
	SetProperty(0x1b1, VT_I4, propVal);
}
long GetShowAnnotationsMenu()
{
	long result;
	GetProperty(0x1b2, VT_I4, (void*)&result);
	return result;
}
void SetShowAnnotationsMenu(long propVal)
{
	SetProperty(0x1b2, VT_I4, propVal);
}
long GetUndoZoomMenu()
{
	long result;
	GetProperty(0x1b3, VT_I4, (void*)&result);
	return result;
}
void SetUndoZoomMenu(long propVal)
{
	SetProperty(0x1b3, VT_I4, propVal);
}
long GetIncludeDataLabelsMenu()
{
	long result;
	GetProperty(0x1b4, VT_I4, (void*)&result);
	return result;
}
void SetIncludeDataLabelsMenu(long propVal)
{
	SetProperty(0x1b4, VT_I4, propVal);
}
long GetBitmapGradientMenu()
{
	long result;
	GetProperty(0x1b5, VT_I4, (void*)&result);
	return result;
}
void SetBitmapGradientMenu(long propVal)
{
	SetProperty(0x1b5, VT_I4, propVal);
}
BOOL GetBitmapGradientMode()
{
	BOOL result;
	GetProperty(0x1b6, VT_BOOL, (void*)&result);
	return result;
}
void SetBitmapGradientMode(BOOL propVal)
{
	SetProperty(0x1b6, VT_BOOL, propVal);
}
unsigned long GetDeskGradientStart()
{
	unsigned long result;
	GetProperty(0x1b7, VT_UI4, (void*)&result);
	return result;
}
void SetDeskGradientStart(unsigned long propVal)
{
	SetProperty(0x1b7, VT_UI4, propVal);
}
unsigned long GetDeskGradientEnd()
{
	unsigned long result;
	GetProperty(0x1b8, VT_UI4, (void*)&result);
	return result;
}
void SetDeskGradientEnd(unsigned long propVal)
{
	SetProperty(0x1b8, VT_UI4, propVal);
}
long GetDeskGradientStyle()
{
	long result;
	GetProperty(0x1b9, VT_I4, (void*)&result);
	return result;
}
void SetDeskGradientStyle(long propVal)
{
	SetProperty(0x1b9, VT_I4, propVal);
}
CString GetDeskBmpFilename()
{
	CString result;
	GetProperty(0x1ba, VT_BSTR, (void*)&result);
	return result;
}
void SetDeskBmpFilename(CString propVal)
{
	SetProperty(0x1ba, VT_BSTR, propVal);
}
long GetDeskBmpStyle()
{
	long result;
	GetProperty(0x1bb, VT_I4, (void*)&result);
	return result;
}
void SetDeskBmpStyle(long propVal)
{
	SetProperty(0x1bb, VT_I4, propVal);
}
unsigned long GetGraphGradientStart()
{
	unsigned long result;
	GetProperty(0x1bc, VT_UI4, (void*)&result);
	return result;
}
void SetGraphGradientStart(unsigned long propVal)
{
	SetProperty(0x1bc, VT_UI4, propVal);
}
unsigned long GetGraphGradientEnd()
{
	unsigned long result;
	GetProperty(0x1bd, VT_UI4, (void*)&result);
	return result;
}
void SetGraphGradientEnd(unsigned long propVal)
{
	SetProperty(0x1bd, VT_UI4, propVal);
}
long GetGraphGradientStyle()
{
	long result;
	GetProperty(0x1be, VT_I4, (void*)&result);
	return result;
}
void SetGraphGradientStyle(long propVal)
{
	SetProperty(0x1be, VT_I4, propVal);
}
CString GetGraphBmpFilename()
{
	CString result;
	GetProperty(0x1bf, VT_BSTR, (void*)&result);
	return result;
}
void SetGraphBmpFilename(CString propVal)
{
	SetProperty(0x1bf, VT_BSTR, propVal);
}
long GetGraphBmpStyle()
{
	long result;
	GetProperty(0x1c0, VT_I4, (void*)&result);
	return result;
}
void SetGraphBmpStyle(long propVal)
{
	SetProperty(0x1c0, VT_I4, propVal);
}
BOOL GetPngIsTransparent()
{
	BOOL result;
	GetProperty(0x1c1, VT_BOOL, (void*)&result);
	return result;
}
void SetPngIsTransparent(BOOL propVal)
{
	SetProperty(0x1c1, VT_BOOL, propVal);
}
unsigned long GetPngTransparentColor()
{
	unsigned long result;
	GetProperty(0x1c2, VT_UI4, (void*)&result);
	return result;
}
void SetPngTransparentColor(unsigned long propVal)
{
	SetProperty(0x1c2, VT_UI4, propVal);
}
BOOL GetPngIsInterlaced()
{
	BOOL result;
	GetProperty(0x1c3, VT_BOOL, (void*)&result);
	return result;
}
void SetPngIsInterlaced(BOOL propVal)
{
	SetProperty(0x1c3, VT_BOOL, propVal);
}
long GetJpgQuality()
{
	long result;
	GetProperty(0x1c4, VT_I4, (void*)&result);
	return result;
}
void SetJpgQuality(long propVal)
{
	SetProperty(0x1c4, VT_I4, propVal);
}
long GetHideIntersectingText()
{
	long result;
	GetProperty(0x1c5, VT_I4, (void*)&result);
	return result;
}
void SetHideIntersectingText(long propVal)
{
	SetProperty(0x1c5, VT_I4, propVal);
}
BOOL GetbStop()
{
	BOOL result;
	GetProperty(0x1c6, VT_BOOL, (void*)&result);
	return result;
}
void SetbStop(BOOL propVal)
{
	SetProperty(0x1c6, VT_BOOL, propVal);
}
long GetLongYAxisTickMenu()
{
	long result;
	GetProperty(0x1c7, VT_I4, (void*)&result);
	return result;
}
void SetLongYAxisTickMenu(long propVal)
{
	SetProperty(0x1c7, VT_I4, propVal);
}
long GetLongXAxisTickMenu()
{
	long result;
	GetProperty(0x1c8, VT_I4, (void*)&result);
	return result;
}
void SetLongXAxisTickMenu(long propVal)
{
	SetProperty(0x1c8, VT_I4, propVal);
}
long GetQuickStyle()
{
	long result;
	GetProperty(0x1c9, VT_I4, (void*)&result);
	return result;
}
void SetQuickStyle(long propVal)
{
	SetProperty(0x1c9, VT_I4, propVal);
}
long GetQuickStyleMenu()
{
	long result;
	GetProperty(0x1ca, VT_I4, (void*)&result);
	return result;
}
void SetQuickStyleMenu(long propVal)
{
	SetProperty(0x1ca, VT_I4, propVal);
}
double GetZoomMinTX()
{
	double result;
	GetProperty(0x1f9, VT_R8, (void*)&result);
	return result;
}
void SetZoomMinTX(double propVal)
{
	SetProperty(0x1f9, VT_R8, propVal);
}
double GetZoomMaxTX()
{
	double result;
	GetProperty(0x1fa, VT_R8, (void*)&result);
	return result;
}
void SetZoomMaxTX(double propVal)
{
	SetProperty(0x1fa, VT_R8, propVal);
}
long GetPrintStyleControl()
{
	long result;
	GetProperty(0x1fb, VT_I4, (void*)&result);
	return result;
}
void SetPrintStyleControl(long propVal)
{
	SetProperty(0x1fb, VT_I4, propVal);
}
unsigned long GetMonoGraphForeColor()
{
	unsigned long result;
	GetProperty(0x1fc, VT_UI4, (void*)&result);
	return result;
}
void SetMonoGraphForeColor(unsigned long propVal)
{
	SetProperty(0x1fc, VT_UI4, propVal);
}
unsigned long GetMonoGraphBackColor()
{
	unsigned long result;
	GetProperty(0x1fd, VT_UI4, (void*)&result);
	return result;
}
void SetMonoGraphBackColor(unsigned long propVal)
{
	SetProperty(0x1fd, VT_UI4, propVal);
}
unsigned long GetMonoDeskColor()
{
	unsigned long result;
	GetProperty(0x1fe, VT_UI4, (void*)&result);
	return result;
}
void SetMonoDeskColor(unsigned long propVal)
{
	SetProperty(0x1fe, VT_UI4, propVal);
}
unsigned long GetMonoTextColor()
{
	unsigned long result;
	GetProperty(0x1ff, VT_UI4, (void*)&result);
	return result;
}
void SetMonoTextColor(unsigned long propVal)
{
	SetProperty(0x1ff, VT_UI4, propVal);
}
unsigned long GetMonoShadowColor()
{
	unsigned long result;
	GetProperty(0x200, VT_UI4, (void*)&result);
	return result;
}
void SetMonoShadowColor(unsigned long propVal)
{
	SetProperty(0x200, VT_UI4, propVal);
}
double GetAxisTickSpacing()
{
	double result;
	GetProperty(0x201, VT_R8, (void*)&result);
	return result;
}
void SetAxisTickSpacing(double propVal)
{
	SetProperty(0x201, VT_R8, propVal);
}
double GetXAxisNumberSpacing()
{
	double result;
	GetProperty(0x202, VT_R8, (void*)&result);
	return result;
}
void SetXAxisNumberSpacing(double propVal)
{
	SetProperty(0x202, VT_R8, propVal);
}
double GetXAxisTickSpacing()
{
	double result;
	GetProperty(0x203, VT_R8, (void*)&result);
	return result;
}
void SetXAxisTickSpacing(double propVal)
{
	SetProperty(0x203, VT_R8, propVal);
}
CString GetScaleSymbols()
{
	CString result;
	GetProperty(0x204, VT_BSTR, (void*)&result);
	return result;
}
void SetScaleSymbols(CString propVal)
{
	SetProperty(0x204, VT_BSTR, propVal);
}
double GetGraphAnnotationSizeCntl()
{
	double result;
	GetProperty(0x205, VT_R8, (void*)&result);
	return result;
}
void SetGraphAnnotationSizeCntl(double propVal)
{
	SetProperty(0x205, VT_R8, propVal);
}
BOOL GetScrollingScaleControl()
{
	BOOL result;
	GetProperty(0x206, VT_BOOL, (void*)&result);
	return result;
}
void SetScrollingScaleControl(BOOL propVal)
{
	SetProperty(0x206, VT_BOOL, propVal);
}
long GetSBCode()
{
	long result;
	GetProperty(0x208, VT_I4, (void*)&result);
	return result;
}
void SetSBCode(long propVal)
{
	SetProperty(0x208, VT_I4, propVal);
}
long GetSBPos()
{
	long result;
	GetProperty(0x209, VT_I4, (void*)&result);
	return result;
}
void SetSBPos(long propVal)
{
	SetProperty(0x209, VT_I4, propVal);
}
long GetExportTypeDef()
{
	long result;
	GetProperty(0x20a, VT_I4, (void*)&result);
	return result;
}
void SetExportTypeDef(long propVal)
{
	SetProperty(0x20a, VT_I4, propVal);
}
long GetExportDestDef()
{
	long result;
	GetProperty(0x20b, VT_I4, (void*)&result);
	return result;
}
void SetExportDestDef(long propVal)
{
	SetProperty(0x20b, VT_I4, propVal);
}
long GetExportSizeDef()
{
	long result;
	GetProperty(0x20c, VT_I4, (void*)&result);
	return result;
}
void SetExportSizeDef(long propVal)
{
	SetProperty(0x20c, VT_I4, propVal);
}
CString GetExportFileDef()
{
	CString result;
	GetProperty(0x20d, VT_BSTR, (void*)&result);
	return result;
}
void SetExportFileDef(CString propVal)
{
	SetProperty(0x20d, VT_BSTR, propVal);
}
CString GetExportUnitXDef()
{
	CString result;
	GetProperty(0x20e, VT_BSTR, (void*)&result);
	return result;
}
void SetExportUnitXDef(CString propVal)
{
	SetProperty(0x20e, VT_BSTR, propVal);
}
CString GetExportUnitYDef()
{
	CString result;
	GetProperty(0x20f, VT_BSTR, (void*)&result);
	return result;
}
void SetExportUnitYDef(CString propVal)
{
	SetProperty(0x20f, VT_BSTR, propVal);
}
int GetGraphAnnotTextDodge()
{
	int result;
	GetProperty(0x210, VT_I4, (void*)&result);
	return result;
}
void SetGraphAnnotTextDodge(int propVal)
{
	SetProperty(0x210, VT_I4, propVal);
}
long GetGraphAnnotMoveable()
{
	long result;
	GetProperty(0x211, VT_I4, (void*)&result);
	return result;
}
void SetGraphAnnotMoveable(long propVal)
{
	SetProperty(0x211, VT_I4, propVal);
}
unsigned long GetGraphAnnotBackColor()
{
	unsigned long result;
	GetProperty(0x214, VT_UI4, (void*)&result);
	return result;
}
void SetGraphAnnotBackColor(unsigned long propVal)
{
	SetProperty(0x214, VT_UI4, propVal);
}
long GetTextShadows()
{
	long result;
	GetProperty(0x215, VT_I4, (void*)&result);
	return result;
}
void SetTextShadows(long propVal)
{
	SetProperty(0x215, VT_I4, propVal);
}
BOOL GetLineShadows()
{
	BOOL result;
	GetProperty(0x216, VT_BOOL, (void*)&result);
	return result;
}
void SetLineShadows(BOOL propVal)
{
	SetProperty(0x216, VT_BOOL, propVal);
}
int GetGradientBars()
{
	int result;
	GetProperty(0x217, VT_I4, (void*)&result);
	return result;
}
void SetGradientBars(int propVal)
{
	SetProperty(0x217, VT_I4, propVal);
}
BOOL GetDarkTextInset()
{
	BOOL result;
	GetProperty(0x218, VT_BOOL, (void*)&result);
	return result;
}
void SetDarkTextInset(BOOL propVal)
{
	SetProperty(0x218, VT_BOOL, propVal);
}
BOOL GetYAxisWholeNumbers()
{
	BOOL result;
	GetProperty(0x219, VT_BOOL, (void*)&result);
	return result;
}
void SetYAxisWholeNumbers(BOOL propVal)
{
	SetProperty(0x219, VT_BOOL, propVal);
}
BOOL GetRYAxisWholeNumbers()
{
	BOOL result;
	GetProperty(0x21a, VT_BOOL, (void*)&result);
	return result;
}
void SetRYAxisWholeNumbers(BOOL propVal)
{
	SetProperty(0x21a, VT_BOOL, propVal);
}
BOOL GetXAxisWholeNumbers()
{
	BOOL result;
	GetProperty(0x21b, VT_BOOL, (void*)&result);
	return result;
}
void SetXAxisWholeNumbers(BOOL propVal)
{
	SetProperty(0x21b, VT_BOOL, propVal);
}
BOOL GetTXAxisWholeNumbers()
{
	BOOL result;
	GetProperty(0x21c, VT_BOOL, (void*)&result);
	return result;
}
void SetTXAxisWholeNumbers(BOOL propVal)
{
	SetProperty(0x21c, VT_BOOL, propVal);
}
int GetYAxisLineLimit()
{
	int result;
	GetProperty(0x21d, VT_I4, (void*)&result);
	return result;
}
void SetYAxisLineLimit(int propVal)
{
	SetProperty(0x21d, VT_I4, propVal);
}
int GetRYAxisLineLimit()
{
	int result;
	GetProperty(0x21e, VT_I4, (void*)&result);
	return result;
}
void SetRYAxisLineLimit(int propVal)
{
	SetProperty(0x21e, VT_I4, propVal);
}
int GetXAxisLineLimit()
{
	int result;
	GetProperty(0x21f, VT_I4, (void*)&result);
	return result;
}
void SetXAxisLineLimit(int propVal)
{
	SetProperty(0x21f, VT_I4, propVal);
}
int GetTXAxisLineLimit()
{
	int result;
	GetProperty(0x220, VT_I4, (void*)&result);
	return result;
}
void SetTXAxisLineLimit(int propVal)
{
	SetProperty(0x220, VT_I4, propVal);
}
long GetMouseWheelFunction()
{
	long result;
	GetProperty(0x221, VT_I4, (void*)&result);
	return result;
}
void SetMouseWheelFunction(long propVal)
{
	SetProperty(0x221, VT_I4, propVal);
}
BOOL GetEnabled()
{
	BOOL result;
	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
	return result;
}
void SetEnabled(BOOL propVal)
{
	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}
long GethWnd()
{
	long result;
	GetProperty(DISPID_HWND, VT_I4, (void*)&result);
	return result;
}
void SethWnd(long propVal)
{
	SetProperty(DISPID_HWND, VT_I4, propVal);
}


};
